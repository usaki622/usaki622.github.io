<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【AJAX】01-AJAX入门</title>
      <link href="/2023/11/25/%E3%80%90AJAX%E3%80%9101-AJAX%E5%85%A5%E9%97%A8/"/>
      <url>/2023/11/25/%E3%80%90AJAX%E3%80%9101-AJAX%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="（一）AJAX-概念和-axios-使用">（一）AJAX 概念和 axios 使用</h3><p><font color=#1E90FF>首先了解一下什么是AJAX。</font></p><img src="https://s2.loli.net/2023/11/25/KxVOWTFMN3qaJry.png" style="zoom: 33%;" ><blockquote><p>AJAX（Asynchronous JavaScript and XML）是一种用于创建快速动态网页的技术。它并非是一种新的编程语言，而是一组利用现有技术的集合。AJAX 使用以下技术的组合：</p><ol><li><strong>HTML 和 CSS：</strong> 用于表示和样式化网页的基本结构。</li><li><strong>JavaScript：</strong> 用于实现异步请求和处理返回的数据。AJAX 的核心是使用 JavaScript 发起异步请求，无需刷新整个页面。</li><li><strong>XMLHttpRequest 对象（XHR）：</strong> 用于在后台与服务器进行数据交换。XHR 对象提供了一个简单的方式，使得浏览器能够在后台与服务器进行通信，获取或发送数据，而无需刷新整个页面。</li><li><strong>XML 或 JSON：</strong> 用于传输和解析数据。XML 原先是 AJAX 的主要数据格式，但随着 JSON 的流行，许多 AJAX 请求现在使用 JSON 格式。</li></ol><p>AJAX 的关键特性是它能够在不重新加载整个页面的情况下，异步地从服务器获取或发送数据。这意味着用户可以与页面交互，同时页面可以在后台与服务器进行通信，实现更快速、动态和流畅的用户体验。AJAX 可以用于实现各种功能，例如无刷新的表单提交、动态加载内容、实时更新等。</p></blockquote><p><font color=#CD6839>那么，我们如何学习AJAX呢？</font></p><ul><li>这里使用一个第三方库叫 axios, 后续在学习 XMLHttpRequest 对象了解 AJAX 底层原理</li><li>因为 axios 库语法简单，让我们有更多精力关注在与服务器通信上，而且后续 Vue，React 学习中，也使用 axios 库与服务器通信</li></ul><blockquote><p>Axios 和传统的 AJAX（Asynchronous JavaScript and XML）可以说有一定的替代关系，因为它们都涉及到处理 HTTP 请求，实现异步通信。然而，Axios 更准确地说是一种基于 Promise 的 HTTP 客户端，而 AJAX 则是一种更广义的技术概念。</p><p>下面是一些关于 Axios 和 AJAX 的比较和相关信息：</p><ol><li><strong>Promise-based vs Callbacks:</strong><ul><li>Axios 是基于 Promise 的，它使用 Promise 对象来处理异步请求，提供更直观和可读性更高的代码结构。</li><li>传统的 AJAX 通常使用回调函数来处理异步请求，可能导致代码结构较为复杂，容易出现回调地狱。</li></ul></li><li><strong>API 简洁性：</strong><ul><li>Axios 提供了一个简洁、易于使用的 API，支持链式调用，使得发送 HTTP 请求变得更加直观和简单。</li><li>AJAX 的 API 相对较为原始，使用 XMLHttpRequest 对象，语法相对冗长。</li></ul></li><li><strong>功能特性：</strong><ul><li>Axios 提供了许多强大的功能，如拦截器（interceptors）、取消请求、自动转换 JSON 数据等。</li><li>AJAX 原生的功能相对较为基础，有些高级特性可能需要额外的代码或依赖其他库。</li></ul></li><li><strong>浏览器和 Node.js 兼容性：</strong><ul><li>Axios 可以在浏览器和 Node.js 等环境中使用，使得你可以在客户端和服务器端之间共享相似的代码，提高了一致性。</li><li>AJAX 更紧密地与浏览器环境绑定，不太容易在服务器端使用。</li></ul></li><li><strong>社区支持和流行度：</strong><ul><li>Axios 是一个流行且被广泛使用的库，有着强大的社区支持。</li><li>AJAX 的概念更为广泛，传统的 XMLHttpRequest 和 jQuery 的 AJAX 方法等在过去很长一段时间内是前端开发中常见的工具。</li></ul></li></ol><p>总体而言，Axios 在许多方面提供了更现代和便捷的方式来处理 HTTP 请求，因此在新的项目或对现代前端开发有需求的情况下，使用 Axios 是一个很好的选择。然而，对于一些传统的项目或已经使用 AJAX 的项目，继续使用也是合理的。</p></blockquote><p>axios的使用很简单，只需要引入库，再用相关语法编写就好了，示例如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    axios库地址：https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js</span></span><br><span class="line"><span class="comment">    省份数据地址：http://hmajax.itheima.net/api/province</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    目标: 使用axios库, 获取省份列表数据, 展示到页面上</span></span><br><span class="line"><span class="comment">    1. 引入axios库</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;my-p&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 使用axios函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">axios</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">url</span>: <span class="string">&#x27;http://hmajax.itheima.net/api/province&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 好习惯：多打印，确认属性名</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">data</span>.<span class="property">list</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">data</span>.<span class="property">list</span>.<span class="title function_">join</span>(<span class="string">&#x27;&lt;br&gt;&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 把准备好省份列表，插入到页面</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.my-p&#x27;</span>).<span class="property">innerHTML</span> = result.<span class="property">data</span>.<span class="property">list</span>.<span class="title function_">join</span>(<span class="string">&#x27;&lt;br&gt;&#x27;</span>) </span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="（二）认识URL">（二）认识URL</h3><p><font color=#A020F0><em>这部分应该相对熟悉了，过一下PPT就好。</em></font></p><p>先了解一下什么是URL。</p><img src="https://s2.loli.net/2023/11/25/DEUVJvILA6tONGa.png" style="zoom: 33%;" ><p>再看一下URL的组成。</p><blockquote><p>URL（Uniform Resource Locator，统一资源定位符）是用于定位和访问互联网上资源的地址。一个标准的 URL 由以下几个部分组成：</p><ol><li><p><strong>协议（Protocol）：</strong></p><ul><li>协议是指访问资源所使用的通信协议，例如 HTTP、HTTPS、FTP、SMTP 等。协议部分通常以冒号和两个斜杠开头（<code>://</code>）。</li></ul><p>例如：<code>http://</code>, <code>https://</code>, <code>ftp://</code></p></li><li><p><strong>主机（Host）：</strong></p><ul><li>主机标识了资源所在的服务器的域名或 IP 地址。主机部分紧跟在协议部分后面。</li></ul><p>例如：<code>www.example.com</code>, <code>192.168.1.1</code></p></li><li><p><strong>端口（Port）：</strong></p><ul><li>端口用于标识在服务器上提供服务的特定端口号。端口号是一个可选的部分，如果未指定，默认使用协议的默认端口。</li></ul><p>例如：<code>:80</code> 表示使用 HTTP 协议的默认端口，<code>:443</code> 表示使用 HTTPS 协议的默认端口。</p></li><li><p><strong>路径（Path）：</strong></p><ul><li>路径指定了服务器上资源的具体位置。路径以斜杠 <code>/</code> 开头，可以包含多个目录层次。</li></ul><p>例如：<code>/path/to/resource</code></p></li><li><p><strong>查询字符串（Query String）：</strong></p><ul><li>查询字符串用于向服务器传递参数，参数和值之间使用 <code>&amp;</code> 连接，通常以 <code>?</code> 开头。</li></ul><p>例如：<code>?key1=value1&amp;key2=value2</code></p></li><li><p><strong>片段标识符（Fragment）：</strong></p><ul><li>片段标识符用于标识资源中的特定片段或位置。片段标识符以 <code>#</code> 开头。</li></ul><p>例如：<code>#section1</code>, <code>#top</code></p></li></ol><p>综合起来，一个标准的 URL 的基本格式为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rubyCopy code</span><br><span class="line">[协议]://[主机]:[端口]/[路径]?[查询字符串]#[片段标识符]</span><br></pre></td></tr></table></figure><p>以下是一个示例 URL：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bashCopy code</span><br><span class="line">https://www.example.com:8080/path/to/resource?name=value#section1</span><br></pre></td></tr></table></figure><p>在这个示例中：</p><ul><li>协议是 <code>https://</code></li><li>主机是 <code>www.example.com</code></li><li>端口是 <code>:8080</code></li><li>路径是 <code>/path/to/resource</code></li><li>查询字符串是 <code>?name=value</code></li><li>片段标识符是 <code>#section1</code></li></ul></blockquote><h3 id="（三）URL查询参数">（三）URL查询参数</h3><p><font color=#2E8B57>URL查询参数就是上面的查询字符串。它可以携带给服务器额外信息，让服务器返回我想要的某一部分数据而不是全部数据。</font></p><p><font color=#CD6839>语法就是在 url 网址后面用?拼接，格式：<a href="http://xxxx.com/xxx/xxx?%E5%8F%82%E6%95%B0%E5%90%8D1=%E5%80%BC1&amp;%E5%8F%82%E6%95%B0%E5%90%8D2=%E5%80%BC2%E3%80%82">http://xxxx.com/xxx/xxx?参数名1=值1&amp;参数名2=值2。</a> 参数名一般是后端规定的，值前端看情况传递即可</font></p><p>在axios中传递则很简单，语法如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;目标资源地址&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">        参数名: 值</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 对服务器返回的数据做后续处理</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="（四）常用请求方法和数据提交">（四）常用请求方法和数据提交</h3><p><font color=#1E90FF>前面我们仅仅是从服务器获取数据，但是无法提交数据。想要提交数据，得了解一下HTTP的各种请求方法。</font></p><blockquote><p>HTTP（Hypertext Transfer Protocol）定义了多种请求方法，也称为 HTTP 方法或 HTTP 请求类型，用于指定对目标资源的操作。每个 HTTP 请求都使用一个特定的方法。以下是一些常见的 HTTP 请求方法：</p><ol><li><strong>GET：</strong><ul><li>用于从服务器获取资源。GET 请求只是读取数据，不对服务器上的数据进行修改。它是一个幂等的方法，多个相同的 GET 请求应该具有相同的效果。</li></ul></li><li><strong>POST：</strong><ul><li>用于向服务器提交数据，以创建新的资源。POST 请求可能导致新的资源的创建和服务器端的状态变化。它不是幂等的，多次相同的 POST 请求可能会产生不同的效果。</li></ul></li><li><strong>PUT：</strong><ul><li>用于向服务器更新或创建资源。PUT 请求是幂等的，即多次相同的 PUT 请求应该具有相同的效果。通常用于更新已存在的资源。</li></ul></li><li><strong>DELETE：</strong><ul><li>用于请求服务器删除指定的资源。DELETE 请求是幂等的，多次相同的 DELETE 请求应该具有相同的效果。</li></ul></li><li><strong>PATCH：</strong><ul><li>用于对资源进行部分更新。与 PUT 不同，PATCH 请求通常用于更新资源的一部分而不是整体。它是幂等的，但可能会导致不同的效果。</li></ul></li><li><strong>HEAD：</strong><ul><li>类似于 GET 请求，但服务器只返回响应头，不返回实际数据。通常用于检查资源的元信息，如是否存在、是否已修改等，而不需要获取实际数据。</li></ul></li><li><strong>OPTIONS：</strong><ul><li>用于描述目标资源的通信选项。客户端可以使用 OPTIONS 请求来了解服务器支持哪些方法、头信息等。它是一个预检请求，用于 CORS（跨域资源共享）。</li></ul></li><li><strong>TRACE：</strong><ul><li>用于在目标服务器端执行一个消息回环测试。TRACE 请求主要用于诊断，客户端发出的 TRACE 请求会在服务器端原样返回。</li></ul></li><li><strong>CONNECT：</strong><ul><li>用于建立与目标资源的隧道连接，通常用于代理服务器。</li></ul></li></ol><p>这些 HTTP 请求方法定义了对资源的不同操作，使得客户端和服务器能够进行各种交互。不同的方法用于实现不同的业务逻辑，例如获取数据、创建资源、更新资源、删除资源等。</p></blockquote><p>那么使用axios该如何提交呢？加两个选项就好了。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;目标资源地址&#x27;</span>,</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;请求方法&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    参数名: 值</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 对服务器返回的数据做后续处理</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>举一个示例：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  注册用户：http://hmajax.itheima.net/api/register</span></span><br><span class="line"><span class="comment">  请求方法：POST</span></span><br><span class="line"><span class="comment">  参数名：</span></span><br><span class="line"><span class="comment">    username：用户名（中英文和数字组成，最少8位）</span></span><br><span class="line"><span class="comment">    password：密码  （最少6位）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  目标：点击按钮，通过axios提交用户和密码，完成注册</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.btn&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://hmajax.itheima.net/api/register&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">username</span>: <span class="string">&#x27;itheima007&#x27;</span>,</span><br><span class="line">      <span class="attr">password</span>: <span class="string">&#x27;7654321&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><font color=#CD6839>前面我们都是用then来接受正确的响应信息的。但是有时候也会有错误的响应，那要如何处理呢？</font></p><p>我们还是以上面的注册为例子。如果注册相同的用户名，则会遇到注册失败的请求，也就是 axios 请求响应失败了，你会在控制台看到如图的错误：</p><img src="https://s2.loli.net/2023/11/25/T1xeOCJz9YsMkfh.png"><p>但是普通用户不会去控制台里看错误信息，我们要编写代码拿到错误并展示给用户在页面上，语法如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">  <span class="comment">// ...请求选项</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 处理成功数据</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 处理失败错误</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>完整的示例代码如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.btn&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">axios</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;http://hmajax.itheima.net/api/register&#x27;</span>,</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">username</span>: <span class="string">&#x27;itheima007&#x27;</span>,</span><br><span class="line">        <span class="attr">password</span>: <span class="string">&#x27;7654321&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 成功</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 失败</span></span><br><span class="line">      <span class="comment">// 处理错误信息</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(error.<span class="property">response</span>.<span class="property">data</span>.<span class="property">message</span>)</span><br><span class="line">      <span class="title function_">alert</span>(error.<span class="property">response</span>.<span class="property">data</span>.<span class="property">message</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="（五）HTTP协议-报文">（五）HTTP协议-报文</h3><h4 id="1-请求报文">1.请求报文</h4><p><font color=#1E90FF>学习了请求报文，就知道浏览器是如何把请求发送给服务器了。</font></p><p><font color=#2E8B57>首先让我们回顾一下HTTP协议。这是一种 <strong>协议</strong> ，它规定了浏览器发送以及服务器返回内容的 <strong>格式</strong> 。在此基础上， <strong>请求报文</strong> 就是浏览器按照 HTTP 协议要求的格式，发送给服务器的内容。</font></p><p>我们还是以上面的注册为例子，我们发送了那些信息：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://hmajax.itheima.net/api/register&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">username</span>: <span class="string">&#x27;itheima007&#x27;</span>,</span><br><span class="line">        <span class="attr">password</span>: <span class="string">&#x27;7654321&#x27;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>那么这些信息就会自动封装到请求报文里，让我们看看请求报文长什么样：</p><img src="https://s2.loli.net/2023/11/25/P9Oo3Sj5vIsb8p6.png"><p><font color=#CD5555>这里的格式包含：</font></p><ul><li><strong>请求行：</strong> 请求方法，URL，协议</li><li><strong>请求头：</strong> 以键值对的格式携带的附加信息，比如：Content-Type（指定了本次传递的内容类型）</li><li>**空行： **分割请求头，空行之后的是发送给服务器的资源</li><li><strong>请求体：</strong> 发送的资源</li></ul><p><font color=#A020F0>那么这个请求报文在哪里能看到呢？其实在浏览器里就可以看到了！</font></p><img src="https://s2.loli.net/2023/11/25/BgH92dnFQTPqGVt.png" style="zoom:50%;" ><blockquote><p>在浏览器里查看请求报文（Request Headers）和响应报文（Response Headers）可以提供对网络请求和响应的详细了解，帮助你调试和优化前端和后端的交互。以下是查看请求报文和响应报文的一些作用：</p><ol><li><strong>调试网络请求：</strong> 查看请求报文可以帮助你确认请求是否按照预期发送到服务器。你可以检查请求的方法、URL、请求头、请求体等信息，以确保请求的正确性。</li><li><strong>分析响应：</strong> 查看响应报文允许你检查服务器的响应，包括状态码、响应头和响应体。这对于理解服务器端返回的数据、处理错误和优化性能非常有帮助。</li><li><strong>检查请求头：</strong> 请求头包含有关请求的元数据，如浏览器类型、支持的压缩算法、所需的数据类型等。通过查看请求头，你可以了解浏览器与服务器之间的协商和通信细节。</li><li><strong>设置请求参数：</strong> 有时，通过自定义请求头或查询参数可以改变请求的行为。通过查看请求报文，你可以确认这些参数是否被正确设置。</li><li><strong>调试身份验证问题：</strong> 如果你的应用使用身份验证（例如，使用 JWT），查看请求报文可以帮助你确认身份验证令牌是否正确附加到请求中。</li><li><strong>性能分析：</strong> 查看请求和响应的时间戳信息，可以帮助你评估网络请求的性能，确定是否存在延迟或潜在的性能问题。</li><li><strong>缓存控制：</strong> 请求报文中的缓存控制头（Cache-Control）可以指导浏览器和代理服务器如何缓存响应。通过查看这些信息，你可以了解缓存是否起作用。</li></ol><p>在浏览器开发者工具中，你可以使用 Network 面板查看请求和响应的详细信息。这通常包括 Headers、Preview（响应体的预览）、Response（响应体的原始内容）等选项。这些工具提供了丰富的信息，有助于你深入了解前端和后端之间的通信过程。</p></blockquote><h4 id="2-响应报文">2.响应报文</h4><p><font color=#2E8B57>那么既然浏览器会发送请求报文，服务器自然也会有 <strong>响应报文</strong> 。</font></p><p><font color=#1E90FF>响应报文和请求报文很类似，看一下PPT就懂了：</font></p><img src="https://s2.loli.net/2023/11/25/zo6eOwbGNVgxUmS.png" style="zoom: 33%;" ><p><font color=#CD6839>这里面我们重点关注一下 <strong>HTTP响应状态码</strong> 。</font></p><blockquote><p>HTTP（Hypertext Transfer Protocol）响应状态码是服务器对于特定 HTTP 请求所返回的标准化状态标识。状态码由三位数字组成，分别表示不同的响应类别。以下是一些常见的 HTTP 响应状态码及其含义：</p><ol><li><strong>1xx（Informational）：</strong><ul><li>100 Continue：继续。客户端应继续其请求。</li><li>101 Switching Protocols：切换协议。服务器已经理解并接受客户端的请求，通过切换协议告知客户端。</li></ul></li><li><strong>2xx（Successful）：</strong><ul><li>200 OK：请求成功。表示服务器已成功处理了请求。</li><li>201 Created：已创建。请求成功且服务器创建了新资源。</li><li>204 No Content：无内容。服务器成功处理了请求，但没有返回任何内容。</li></ul></li><li><strong>3xx（Redirection）：</strong><ul><li>300 Multiple Choices：多种选择。被请求的资源有多个表示，用户或代理可以选择其中一个。</li><li>301 Moved Permanently：永久重定向。请求的资源已被永久移动到新位置。</li><li>302 Found：临时重定向。请求的资源临时移动到新位置。</li><li>304 Not Modified：未修改。资源未被修改，可以使用缓存的版本。</li></ul></li><li><strong>4xx（Client Error）：</strong><ul><li>400 Bad Request：请求错误。服务器无法理解请求的语法。</li><li>401 Unauthorized：未授权。需要身份验证或身份验证失败。</li><li>403 Forbidden：禁止访问。服务器理解请求，但拒绝执行。</li><li>404 Not Found：未找到。请求的资源不存在。</li></ul></li><li><strong>5xx（Server Error）：</strong><ul><li>500 Internal Server Error：内部服务器错误。服务器遇到意外情况，无法完成请求。</li><li>501 Not Implemented：未实现。服务器不支持请求的功能。</li><li>503 Service Unavailable：服务不可用。服务器暂时过载或维护，无法处理请求。</li></ul></li></ol><p>这些状态码用于指示请求的处理状态，使客户端能够了解请求的结果。状态码的第一个数字表示响应的类别，后两位数字没有分类的作用。状态码是 HTTP 协议的一部分，它们提供了一种标准的方式，使客户端和服务器能够协商和处理不同的请求和错误情况。</p></blockquote><h3 id="（六）接口文档">（六）接口文档</h3><p><font color=#A020F0><em>这章其实就介绍了一下接口文档是什么。我们就看一下PPT上的介绍，再看一下黑马程序员写的接口文档就好啦。</em></font></p><img src="https://s2.loli.net/2023/11/25/QMEO7vjJ3RUe5zD.png" style="zoom:33%;" ><p>黑马程序员在AJAX阶段提供的接口文档如下：</p><p><a href="https://apifox.com/apidoc/shared-1b0dd84f-faa8-435d-b355-5a8a329e34a8">欢迎使用 - B站-AJAX和黑马头条-数据管理平台 (apifox.com)</a></p><p><font color=#1E90FF>写得还是挺好的，不过说不定哪天就没了.jpg</font></p><h3 id="（案例）用户登录">（案例）用户登录</h3><p>学了那么多，让我们做个小案例看看吧！</p><p><font color=#2E8B57>首先让我们看一下PPT上的需求：</font></p><img src="https://s2.loli.net/2023/11/25/6f837AmdJXEyuKq.png" style="zoom: 33%;" ><p>前两个目标相当容易实现，看一下代码：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 目标1：点击登录时，用户名和密码长度判断，并提交数据和服务器通信</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.1 登录-点击事件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.btn-login&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.2 获取用户名和密码</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> username = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.username&#x27;</span>).<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> password = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.password&#x27;</span>).<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(username, password)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.3 判断长度</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (username.<span class="property">length</span> &lt; <span class="number">8</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;用户名必须大于等于8位&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="comment">// 阻止代码继续执行</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (password.<span class="property">length</span> &lt; <span class="number">6</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;密码必须大于等于6位&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="comment">// 阻止代码继续执行</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.4 基于axios提交用户名和密码</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(&#x27;提交数据到服务器&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">axios</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">url</span>: <span class="string">&#x27;http://hmajax.itheima.net/api/login&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                username,</span></span><br><span class="line"><span class="language-javascript">                password</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">data</span>.<span class="property">message</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(error.<span class="property">response</span>.<span class="property">data</span>.<span class="property">message</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不过这样的话就只是在控制台打印了，为了好看我们还是用提示框，颜色的改变通过类名的改变来进行。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.1 获取提示框</span></span><br><span class="line"><span class="keyword">const</span> myAlert = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.alert&#x27;</span>)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 2.2 封装提示框函数，重复调用，满足提示需求</span></span><br><span class="line"><span class="comment">     * 功能：</span></span><br><span class="line"><span class="comment">     * 1. 显示提示框</span></span><br><span class="line"><span class="comment">     * 2. 不同提示文字msg，和成功绿色失败红色isSuccess（true成功，false失败）</span></span><br><span class="line"><span class="comment">     * 3. 过2秒后，让提示框自动消失</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">alertFn</span>(<span class="params">msg, isSuccess</span>) &#123;</span><br><span class="line">    <span class="comment">// 1&gt; 显示提示框</span></span><br><span class="line">    myAlert.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;show&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2&gt; 实现细节</span></span><br><span class="line">    myAlert.<span class="property">innerText</span> = msg</span><br><span class="line">    <span class="keyword">const</span> bgStyle = isSuccess ? <span class="string">&#x27;alert-success&#x27;</span> : <span class="string">&#x27;alert-danger&#x27;</span></span><br><span class="line">    myAlert.<span class="property">classList</span>.<span class="title function_">add</span>(bgStyle)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3&gt; 过2秒隐藏</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        myAlert.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;show&#x27;</span>)</span><br><span class="line">        <span class="comment">// 提示：避免类名冲突，重置背景色</span></span><br><span class="line">        myAlert.<span class="property">classList</span>.<span class="title function_">remove</span>(bgStyle)</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后面把所有前面控制台打印的都换成这个就行了</span></span><br></pre></td></tr></table></figure><p>如此，我们就实现了一个简单的用户登录案例，巩固了一下前面的知识了！</p><h3 id="（七）form-serialize-插件">（七）form-serialize 插件</h3><p><font color=#1E90FF>我们前面收集表单元素的值，是一个个标签获取的。有没有什么方法可以一次性快速收集出来呢？</font></p><p><font color=#CD6839>当然有，那就是使用 form-serialize 插件，下面用一段代码演示一下：</font></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;javascript:;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;example-form&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    目标：在点击提交时，使用form-serialize插件，快速收集表单元素值</span></span><br><span class="line"><span class="comment">    1. 把插件引入到自己网页中</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/form-serialize.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.btn&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">       * 2. 使用serialize函数，快速收集表单元素的值</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">       * 参数1：要获取哪个表单的数据</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">       *  表单元素设置name属性，值会作为对象的属性名</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">       *  建议name属性的值，最好和接口文档参数名一致</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">       * 参数2：配置对象</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">       *  hash 设置获取数据结构</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">       *    - true：JS对象（推荐）一般请求体里提交给服务器</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">       *    - false: 查询字符串</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">       *  empty 设置是否获取空值</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">       *    - true: 获取空值（推荐）数据结构和标签结构一致</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">       *    - false：不获取空值</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      */</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> form = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.example-form&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> data = <span class="title function_">serialize</span>(form, &#123; <span class="attr">hash</span>: <span class="literal">true</span>, <span class="attr">empty</span>: <span class="literal">true</span> &#125;)</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// const data = serialize(form, &#123; hash: false, empty: true &#125;)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// const data = serialize(form, &#123; hash: true, empty: false &#125;)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>前面的介绍比较直白，让我们看看 chatgpt 的介绍，专业化一点(bushi)：</p><blockquote><p><code>form-serialize</code> 是一个用于序列化 HTML 表单数据的 JavaScript 插件。它可以将表单中的各种输入元素的值转换为 URL 编码的字符串，以便于通过 HTTP 请求发送到服务器。这种形式的序列化通常用于在提交表单时构建请求体。</p></blockquote><p><font color=#A020F0><em>其实以后用了框架，比如 Vue 或者 React 这些，这些框架有自己的表单处理机制，就不需要这个插件了。所以这里就了解一下。</em></font></p><blockquote><p>请注意，虽然 <code>form-serialize</code> 插件可以简化表单数据的序列化过程，但在现代前端开发中，很多框架和库提供了更强大且灵活的工具来处理表单数据，例如 Vue.js 和 React。这些框架通常具有自己的表单处理机制，可以更好地与应用的状态管理和组件化开发集成。</p></blockquote><p><font color=#DA70D6>chatgpt表示赞同喵.jpg</font></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> AJAX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> AJAX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【博客】字体颜色设置</title>
      <link href="/2023/11/24/%E3%80%90%E5%8D%9A%E5%AE%A2%E3%80%91%E5%AD%97%E4%BD%93%E9%A2%9C%E8%89%B2%E8%AE%BE%E7%BD%AE/"/>
      <url>/2023/11/24/%E3%80%90%E5%8D%9A%E5%AE%A2%E3%80%91%E5%AD%97%E4%BD%93%E9%A2%9C%E8%89%B2%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>本人给博客文字设置颜色的方式很粗暴：使用&lt;font color=“颜色值”&gt;来进行设置。</p><p>下面列出个人常用的颜色表。</p><p><font color=#1E90FF>这是蓝色，1E90FF。</font></p><p><font color=#2E8B57>这是绿色，2E8B57。</font></p><p><font color=#CD6839>这是橘色，CD6839。</font></p><p><font color=#CD5555>这是淡红色，CD5555。</font></p><p><font color=#A020F0>这是紫色，A020F0。</font></p><p><font color=#DA70D6>这是粉色，DA70D6。</font></p><p>如有更好的设置颜色方法/颜色值设置，欢迎指点，感谢~</p>]]></content>
      
      
      <categories>
          
          <category> 博客设置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客设置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/11/23/%E3%80%90Vue%E3%80%9102-%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E4%B8%8E%E7%9B%91%E5%90%AC%E5%99%A8/"/>
      <url>/2023/11/23/%E3%80%90Vue%E3%80%9102-%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E4%B8%8E%E7%9B%91%E5%90%AC%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="一、指令补充">一、指令补充</h2><h3 id="1-指令修饰符">1.指令修饰符</h3><p><font color=1E90FF>我们先介绍一下指令修饰符吧！</font></p><p><font color=#00C957>在Vue.js中，指令修饰符（Directive Modifiers）是一种用于在指令后面添加特殊后缀的语法，以改变指令的行为。指令修饰符通常以点号<code>.</code>开头，放置在指令后面，用于对指令进行额外的操作或配置。</font></p><p>其一大作用就是封装了不同的处理操作，从而简化代码。</p><p><font color=#FF9911>下面就介绍几个比较常见的。看一下PPT上列出的。</font></p><img src="https://s2.loli.net/2023/11/23/pstfPgYncbT1FIV.png" style="zoom: 33%;" ><p>我们以@keyup.enter为例，这个是当点击enter键的时候才触发的。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>@keyup.enter  →  监听键盘回车事件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;fn&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        fn (e) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// if (e.key === &#x27;Enter&#x27;) &#123;</span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//   console.log(&#x27;键盘回车的时候触发&#x27;, this.username)</span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;键盘回车的时候触发&#x27;</span>, <span class="variable language_">this</span>.<span class="property">username</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><font color=#DB7093>这段代码是一个使用Vue.js的简单示例，演示了如何使用<code>@keyup.enter</code>监听键盘回车事件，并将事件绑定到Vue实例的一个方法中。在输入框中输入内容，按下回车键时，<code>fn</code>方法会被调用，打印出当前<code>username</code>的值。</font></p><p><font color=#DA70D6>需要指出的是，这个等效于注释中的代码，只是注释中的代码演示了在普通JavaScript环境中如何通过事件对象判断按下的键是否为回车键。这也说明了指令修饰符如何进行简化。</font></p><p>后面再一段代码演示一下PPT中剩下几种修饰符。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>v-model修饰符 .trim .number<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.trim</span>=<span class="string">&quot;username&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    年纪：<span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.number</span>=<span class="string">&quot;age&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>@事件名.stop     →  阻止冒泡<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;fatherFn&quot;</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click.stop</span>=<span class="string">&quot;sonFn&quot;</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span>儿子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>@事件名.prevent  →  阻止默认行为<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> @<span class="attr">click.prevent</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span>阻止默认行为<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">age</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        fatherFn () &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">alert</span>(<span class="string">&#x27;老父亲被点击了&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        sonFn (e) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// e.stopPropagation()</span></span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">alert</span>(<span class="string">&#x27;儿子被点击了&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><font color=#DB7093>最上面两个不用多解释。.trim就是单纯去空格，.number则是因为通常表单元素（例如 <code>&lt;input&gt;</code> 或 <code>&lt;select&gt;</code>）的值是字符串类型，用这个就可以转化为number类型。</font></p><p><font color=#DB7093>后面的.stop则是阻止冒泡的。这里两个盒子，如果有冒泡就是sonFn和fatherFn方法都会被调用，用了.stop就不会了。这个等效于sonFn方法中的注释。</font></p><p><font color=#DB7093>最后那个.prevent就是阻止了a标签默认的跳转行为了。</font></p><h3 id="2-v-bind增强样式">2.v-bind增强样式</h3><p>我们先回顾一下，v-bind是属性绑定指令，可以动态绑定html的标签属性。</p><p><font color=1E90FF>而为了方便开发者进行样式控制， Vue 扩展了 v-bind 的语法，可以针对 class 类名 和 style 行内样式 进行控制 。让我们来进行学习！</font></p><p><font color=#FF9911>我们首先来看操作class类名。</font></p><img src="https://s2.loli.net/2023/11/24/uTmNHeRbSt4KWni.png" style="zoom: 33%;" ><p>我们以一个案例为例子，就是图里这个京东秒杀tab栏，鼠标点击哪里哪里就会高亮。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;activeIndex = index&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">:class</span>=<span class="string">&quot;&#123; active: index === activeIndex &#125;&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">activeIndex</span>: <span class="number">2</span>, <span class="comment">// 记录高亮</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">list</span>: [</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;京东秒杀&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;每日特价&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;品类秒杀&#x27;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><font color=#DB7093>最上面的<code>v-for</code>就是列表渲染出list里三个东西，下面的<code>:class</code>就是<code>v-bind:class</code>的缩写，当 <code>index</code> 等于 <code>activeIndex</code> 时，将应用 <code>active</code> 类，从而实现高亮效果。<code>@click</code>方法则可以将高亮索引activeIndex设置为当前点击项的索引。</font></p><p><font color=#FF9911>然后我们再来看看v-bind控制 style 行内样式。</font></p><p>语法也和上面类似：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;&#123; CSS属性名1: CSS属性值, CSS属性名2: CSS属性值 &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们也是以一个案例为例子。如图，点击不同按钮，进度条就会呈现不同状态。</p><img src="https://s2.loli.net/2023/11/24/J3ATe6PtNW85sDy.png" style="zoom:50%;" ><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 外层盒子底色 （黑色） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 内层盒子 - 进度（蓝色） --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;&#123; width: percent + &#x27;%&#x27; &#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; percent &#125;&#125;%<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;percent = 25&quot;</span>&gt;</span>设置25%<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;percent = 50&quot;</span>&gt;</span>设置50%<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;percent = 75&quot;</span>&gt;</span>设置75%<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;percent = 100&quot;</span>&gt;</span>设置100%<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">percent</span>: <span class="number">30</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-v-model在其它表单元素中">3.v-model在其它表单元素中</h3><p><font color=1E90FF>回顾一下，v-model是双向绑定指令。但是在之前的学习中，我们只在input输入框中使用过。实际上，在其它表单元素中也都可以双向绑定。</font></p><p>常见的表单元素都可以用 v-model 绑定关联  →  快速 <strong>获取</strong> 或 <strong>设置</strong> 表单元素的值</p><p>它会根据 <strong>控件类型</strong> 自动选取 <strong>正确的方法</strong> 来更新元素</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">输入框  <span class="attr">input</span>:text   ——&gt; value</span><br><span class="line">文本域  textarea ——&gt; value</span><br><span class="line">复选框  <span class="attr">input</span>:checkbox  ——&gt; checked</span><br><span class="line">单选框  <span class="attr">input</span>:radio   ——&gt; checked</span><br><span class="line">下拉菜单 select    ——&gt; value</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><font color=#FF9911>我们用代码来演示一下：</font></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>小黑学习网<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    姓名：</span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    是否单身：</span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;isSingle&quot;</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">      前置理解：</span></span><br><span class="line"><span class="comment">        1. name:  给单选框加上 name 属性 可以分组 → 同一组互相会互斥</span></span><br><span class="line"><span class="comment">        2. value: 给单选框加上 value 属性，用于提交给后台的数据</span></span><br><span class="line"><span class="comment">      结合 Vue 使用 → v-model</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    性别: </span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>男</span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>女</span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">      前置理解：</span></span><br><span class="line"><span class="comment">        1. option 需要设置 value 值，提交给后台</span></span><br><span class="line"><span class="comment">        2. select 的 value 值，关联了选中的 option 的 value 值</span></span><br><span class="line"><span class="comment">      结合 Vue 使用 → v-model</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    所在城市:</span><br><span class="line">      <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;cityId&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;101&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;102&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;103&quot;</span>&gt;</span>成都<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;104&quot;</span>&gt;</span>南京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    自我描述：</span><br><span class="line">      <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">&quot;desc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>立即注册<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">isSingle</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">gender</span>: <span class="string">&quot;2&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">cityId</span>: <span class="string">&#x27;102&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">desc</span>: <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><font color=#DB7093>如此，所有表单里的数据都会和下面的数据实现双向绑定。</font></p><h2 id="二、computed计算属性">二、computed计算属性</h2><h3 id="1-什么是计算属性？">1.什么是计算属性？</h3><p><font color=#00C957>在 Vue.js 中，<code>computed</code> 是一种特殊的属性类型，用于定义一个计算属性。计算属性是基于响应式依赖进行缓存的属性，它的值是根据其他属性计算而来的，并且只有在相关依赖发生变化时才会重新计算。</font></p><p><font color=#FF9911>其语法是：</font></p><ol><li>声明在 <strong>computed 配置项</strong>中，一个计算属性对应一个函数</li><li>使用起来和普通属性一样使用  </li></ol><p>这样说可能有点抽象，让我们看看下面的具体业务。</p><img src="https://s2.loli.net/2023/11/24/9rUz1HFNaLfh8Ox.png"><p>下面的礼物总数直接依赖于上面的num属性，当num属性发生变化时也会一起重新计算。</p><p>具体的代码如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>小黑的礼物清单<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>名字<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>数量<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.num &#125;&#125;个<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 目标：统计求和，求得礼物总数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>礼物总数：&#123;&#123; totalCount &#125;&#125; 个<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 现有的数据</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">list</span>: [</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;篮球&#x27;</span>, <span class="attr">num</span>: <span class="number">1</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;玩具&#x27;</span>, <span class="attr">num</span>: <span class="number">2</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;铅笔&#x27;</span>, <span class="attr">num</span>: <span class="number">5</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        totalCount () &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 基于现有的数据，编写求值逻辑</span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 计算属性函数内部，可以直接通过 this 访问到 app 实例</span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// console.log(this.list)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 需求：对 this.list 数组里面的 num 进行求和 → reduce</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">let</span> total = <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, item</span>) =&gt;</span> sum + item.<span class="property">num</span>, <span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> total</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><font color=#DB7093>注意：计算属性本质上是属性，所以不要加括号。</font></p><blockquote><p>在 Vue.js 中，<code>computed</code> 属性是一种特殊的属性，用于声明计算属性。计算属性不需要像方法一样调用，而是会根据它所依赖的数据自动计算值，并且在模板中可以像普通属性一样使用。因此，在模板中访问计算属性时，不需要加括号。</p></blockquote><p><font color=#DA70D6>几个注意点：</font></p><ol><li>computed配置项和data配置项是 <strong>同级</strong> 的</li><li>computed中的计算属性 <strong>虽然是函数的写法</strong> ，但他<strong>依然是个属性</strong></li><li>computed中的计算属性 <strong>不能</strong> 和data中的属性 <strong>同名</strong></li><li>使用computed中的计算属性和使用data中的属性是一样的用法</li><li>computed中计算属性内部的 <strong>this</strong> 依然 <strong>指向的是Vue实例</strong></li></ol><p><strong>PS：</strong></p><p><font color=#DA70D6><em>这个例子比较简单所以可能看不出和直接用</em></font></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>总数：&#123;&#123; list.reduce((sum, item) =&gt; sum + item.num, 0) &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><font color=#DA70D6><em>的区别。</em></font></p><p>让我们看看chatgpt是怎么解读的。</p><blockquote><p>在给定的简单例子中，实际上在性能和功能上并没有太大区别。计算属性主要在处理更复杂、耗时的计算逻辑时发挥作用，以及提高代码的可读性。在这个特定的例子中，区别相对较小。</p><p><strong>使用 <code>computed</code> 计算属性的优势：</strong></p><ol><li><strong>缓存：</strong> 计算属性会进行缓存，只有依赖的属性发生变化时才会重新计算，避免了不必要的重复计算，提高性能。</li><li><strong>响应式：</strong> 计算属性是响应式的，当依赖的属性发生变化时，相关的计算属性会自动更新。</li><li><strong>简化模板：</strong> 在模板中使用计算属性时，可以直接像访问普通属性一样使用，不需要显式调用函数，提高代码的可读性。</li></ol><p><strong>不使用 <code>computed</code> 的劣势：</strong></p><ol><li><strong>性能影响：</strong> 如果在模板中使用复杂的逻辑来计算属性，而不是使用 <code>computed</code>，可能会导致模板的渲染性能下降，因为每次渲染都会重新执行相应的逻辑。</li><li><strong>可读性下降：</strong> 在模板中直接写复杂的逻辑会使模板变得冗长和难以理解，降低了代码的可读性和维护性。</li></ol><p>对于小规模的应用，这两种方式之间的差异可能不太明显。</p><p>对于大规模的应用，使用计算属性有助于更好地组织代码，提高可读性和可维护性。</p></blockquote><h3 id="2-computed-计算属性-vs-methods-方法">2.computed 计算属性 vs methods 方法</h3><p><font color=1E90FF>初学者很容易将computed 计算属性和methods 方法搞混，不清楚什么时候该用哪个。下面就来详细介绍一下！</font></p><p><font color=#DA70D6><em>生草，这节就是前面PS里我的疑问，这节就讲了.jpg</em></font></p><img src="https://s2.loli.net/2023/11/24/GoEvXMYZ3y5CmPp.png"><p>请看PPT，这里除了语法上略微的不同，最主要的区别就在于这个 **缓存特性 **。</p><p>我们用实际代码来演示一下。</p><p><font color=#FF9911>来看这个盒子。</font></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>小黑的礼物清单🛒<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; totalCount &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>小黑的礼物清单🛒<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; totalCount &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>小黑的礼物清单🛒<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; totalCount &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>小黑的礼物清单🛒<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; totalCount &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>名字<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>数量<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.num &#125;&#125;个<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>礼物总数：&#123;&#123; totalCount &#125;&#125; 个<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><font color=#FF9911>如果我们用的是计算属性的话（注意，用计算属性的话上面就不需要加括号了）：</font></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">// 计算属性：有缓存的，一旦计算出来结果，就会立刻缓存</span></span><br><span class="line">    <span class="comment">// 下一次读取 → 直接读缓存就行 → 性能特别高</span></span><br><span class="line">    totalCount () &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;计算属性执行了&#x27;</span>)</span><br><span class="line">      <span class="keyword">let</span> total = <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, item</span>) =&gt;</span> sum + item.<span class="property">num</span>, <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">return</span> total</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color=#FF9911>实际执行后，控制台只会打印一次，说明只调用了一次。</font></p><p><font color=#DB7093>而如果用method方法的话。</font></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    totalCountFn () &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;methods方法执行了&#x27;</span>)</span><br><span class="line">        <span class="keyword">let</span> total = <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, item</span>) =&gt;</span> sum + item.<span class="property">num</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> total</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>小黑的礼物清单🛒<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; totalCountFn() &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>小黑的礼物清单🛒<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; totalCountFn() &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>小黑的礼物清单🛒<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; totalCountFn() &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>小黑的礼物清单🛒<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; totalCountFn() &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>名字<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>数量<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.num &#125;&#125;个<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>礼物总数：&#123;&#123; totalCountFn() &#125;&#125; 个<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><font color=#DB7093>这里控制台就会打印五次，说明调用了五次！</font></p><p><font color=#DA70D6>这就体现了计算属性的缓存特性带来的好处了。</font></p><h3 id="3-计算属性完整写法">3.计算属性完整写法</h3><p><font color=1E90FF>思考一个问题。既然计算属性也是属性，能被访问，那是不是也能被修改呢？</font></p><p>实际上，我们前面的写法都是计算属性默认的简写，在那种写法下只能读取访问，不能 “修改”。如果要 “修改”，则需要写计算属性的完整写法，下面展示一下。</p><img src="https://s2.loli.net/2023/11/24/CFaL74KgRjz1PJB.png"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span> +</span><br><span class="line">    名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span> =</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; fullName &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeName&quot;</span>&gt;</span>改名卡<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">firstName</span>: <span class="string">&#x27;刘&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">lastName</span>: <span class="string">&#x27;备&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        changeName () &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">fullName</span> = <span class="string">&#x27;黄忠&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 简写 → 获取，没有配置设置的逻辑</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// fullName () &#123;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//   return this.firstName + this.lastName</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 完整写法 → 获取 + 设置</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">fullName</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// (1) 当fullName计算属性，被获取求值时，执行get（有缓存，优先读缓存）</span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//     会将返回值作为，求值的结果</span></span></span><br><span class="line"><span class="language-javascript">          get () &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// (2) 当fullName计算属性，被修改赋值时，执行set</span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//     修改的值，传递给set方法的形参</span></span></span><br><span class="line"><span class="language-javascript">          set (value) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// console.log(value.slice(0, 1))          </span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// console.log(value.slice(1))         </span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">firstName</span> = value.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">lastName</span> = value.<span class="title function_">slice</span>(<span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><font color=#DB7093>如果没有写set方法的话，点击会报错。</font></p><p><font color=#DA70D6>实际开发中需要修改计算属性的情况并不多，所以大多数时候简写就足够了。但遇到这类需求时，还是需要知道应该如何处理。</font></p><h3 id="（案例）综合小案例-成绩案例">（案例）综合小案例-成绩案例</h3><p>该业务的需求看这张图就能理解：</p><img src="https://s2.loli.net/2023/11/24/c3aCQvhRPzbIliS.png" style="zoom:50%;" ><p>我们接下来就一个一个拆分，看看如何实现吧！</p><h4 id="1-1-渲染功能">1.1 渲染功能</h4><p>首先明确，这个列表是通过v-for列表渲染产生的，具体的数据如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">list</span>: [</span></span><br><span class="line"><span class="language-javascript">                &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">subject</span>: <span class="string">&#x27;语文&#x27;</span>, <span class="attr">score</span>: <span class="number">62</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123; <span class="attr">id</span>: <span class="number">7</span>, <span class="attr">subject</span>: <span class="string">&#x27;数学&#x27;</span>, <span class="attr">score</span>: <span class="number">39</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123; <span class="attr">id</span>: <span class="number">12</span>, <span class="attr">subject</span>: <span class="string">&#x27;英语&#x27;</span>, <span class="attr">score</span>: <span class="number">70</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">            ],</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">subject</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">score</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><font color=#FF9911>这个功能要求给低于60分的成绩渲染上红色，渲染的方式就是添加一个red的class，那么如何实现呢？</font></p><p><font color=#DB7093>很简单，只需要使用v-bind来增强样式即可！具体的写法如下：</font></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; index + 1 &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.subject &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 需求：不及格的标红, &lt; 60 分, 加上 red 类 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">:class</span>=<span class="string">&quot;&#123; red: item.score &lt; 60 &#125;&quot;</span>&gt;</span>&#123;&#123; item.score &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br></pre></td></tr></table></figure><p><font color=#DA70D6>记住用v-for时一定要用:key属性指定唯一标识！</font></p><h4 id="1-2-删除功能">1.2 删除功能</h4><p>在之前的案例中我们写过类似的，删除语句就一句话：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">list</span> = <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">id</span> !== id)</span><br></pre></td></tr></table></figure><p>（如果忘了可以看看chatgpt是如何解释这段代码的）</p><blockquote><p><code>this.list = this.list.filter(item =&gt; item.id !== id)</code> 这行代码使用了 JavaScript 的 <code>filter</code> 方法来删除数组中满足特定条件的元素。这行代码的实现步骤如下：</p><ol><li><code>filter</code> 方法遍历数组中的每个元素。</li><li>对于每个元素，执行回调函数 <code>(item =&gt; item.id !== id)</code>。</li><li>回调函数判断元素的 <code>id</code> 是否等于传入的 <code>id</code>。</li><li>如果元素的 <code>id</code> 不等于传入的 <code>id</code>，则该元素被保留在新数组中。</li><li>如果元素的 <code>id</code> 等于传入的 <code>id</code>，则该元素被过滤掉，不包含在新数组中。</li><li>最终，<code>this.list</code> 被赋值为满足条件的元素组成的新数组，即不包含指定 <code>id</code> 的数组。</li></ol><p>这样，通过 <code>filter</code> 方法，你实际上创建了一个新的数组，其中包含了不包含指定 <code>id</code> 的元素。这种方式实现了删除数组中特定元素的效果。这种做法是典型的使用不变性（Immutability）的方式，即不修改原始数组，而是创建一个新的数组。在 Vue.js 中，这种做法有助于保持响应性系统的稳定性，因为更改引用会触发视图更新。</p></blockquote><p>那么这里就很简单了，只要给这些删除标签绑定上这个事件就行了。注意这些标签是a标签，所以要用指令修饰符阻止一下默认的跳转行为。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tbody</span> <span class="attr">v-if</span>=<span class="string">&quot;list.length &gt; 0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; index + 1 &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.subject &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 需求：不及格的标红, &lt; 60 分, 加上 red 类 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">:class</span>=<span class="string">&quot;&#123; red: item.score &lt; 60 &#125;&quot;</span>&gt;</span>&#123;&#123; item.score &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;del(item.id)&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">list</span>: [</span></span><br><span class="line"><span class="language-javascript">                &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">subject</span>: <span class="string">&#x27;语文&#x27;</span>, <span class="attr">score</span>: <span class="number">62</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123; <span class="attr">id</span>: <span class="number">7</span>, <span class="attr">subject</span>: <span class="string">&#x27;数学&#x27;</span>, <span class="attr">score</span>: <span class="number">39</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123; <span class="attr">id</span>: <span class="number">12</span>, <span class="attr">subject</span>: <span class="string">&#x27;英语&#x27;</span>, <span class="attr">score</span>: <span class="number">70</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">            ],</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">subject</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">score</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            del (id) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// console.log(id)</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">list</span> = <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">id</span> !== id)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-3-添加功能">1.3 添加功能</h4><p>输入科目和分数后点击添加，让其加入就行。</p><p>这个思路很简单，用v-model实现表单输入和底下数据的双向绑定，点击按钮时调用方法加入就行。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-item&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;label&quot;</span>&gt;</span>科目：<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">placeholder</span>=<span class="string">&quot;请输入科目&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">v-model.trim</span>=<span class="string">&quot;subject&quot;</span></span></span><br><span class="line"><span class="tag">                   /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-item&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;label&quot;</span>&gt;</span>分数：<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">placeholder</span>=<span class="string">&quot;请输入分数&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">v-model.number</span>=<span class="string">&quot;score&quot;</span></span></span><br><span class="line"><span class="tag">                   /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-item&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;label&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span> <span class="attr">class</span>=<span class="string">&quot;submit&quot;</span> &gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">......</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">list</span>: [</span></span><br><span class="line"><span class="language-javascript">                &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">subject</span>: <span class="string">&#x27;语文&#x27;</span>, <span class="attr">score</span>: <span class="number">62</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123; <span class="attr">id</span>: <span class="number">7</span>, <span class="attr">subject</span>: <span class="string">&#x27;数学&#x27;</span>, <span class="attr">score</span>: <span class="number">39</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123; <span class="attr">id</span>: <span class="number">12</span>, <span class="attr">subject</span>: <span class="string">&#x27;英语&#x27;</span>, <span class="attr">score</span>: <span class="number">70</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">            ],</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">subject</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">score</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            del (id) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// console.log(id)</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">list</span> = <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">id</span> !== id)</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            add () &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">subject</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(<span class="string">&#x27;请输入科目&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span>.<span class="property">score</span> !== <span class="string">&#x27;number&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(<span class="string">&#x27;请输入正确的成绩&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">unshift</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">id</span>: +<span class="keyword">new</span> <span class="title class_">Date</span>(),</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">subject</span>: <span class="variable language_">this</span>.<span class="property">subject</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">score</span>: <span class="variable language_">this</span>.<span class="property">score</span></span></span><br><span class="line"><span class="language-javascript">                &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">subject</span> = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">score</span> = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><font color=#DB7093>里面有很多的细节处理，例如如何应对表单输入为空，如何处理输入等，应该看一下就能看懂。</font></p><h4 id="1-4-统计总分">1.4 统计总分</h4><p>这个自然就是要用到前面学的计算属性了。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;5&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>总分：&#123;&#123; totalScore &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 50px&quot;</span>&gt;</span>平均分：&#123;&#123; averageScore &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line">......</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">list</span>: [</span></span><br><span class="line"><span class="language-javascript">                &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">subject</span>: <span class="string">&#x27;语文&#x27;</span>, <span class="attr">score</span>: <span class="number">62</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123; <span class="attr">id</span>: <span class="number">7</span>, <span class="attr">subject</span>: <span class="string">&#x27;数学&#x27;</span>, <span class="attr">score</span>: <span class="number">89</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123; <span class="attr">id</span>: <span class="number">12</span>, <span class="attr">subject</span>: <span class="string">&#x27;英语&#x27;</span>, <span class="attr">score</span>: <span class="number">70</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">            ],</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">subject</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">score</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">totalScore</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, item</span>) =&gt;</span> sum + item.<span class="property">score</span>, <span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            averageScore () &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">list</span>.<span class="property">length</span> === <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> (<span class="variable language_">this</span>.<span class="property">totalScore</span> / <span class="variable language_">this</span>.<span class="property">list</span>.<span class="property">length</span>).<span class="title function_">toFixed</span>(<span class="number">2</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            ...</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><font color=#DA70D6>我对js不是很熟悉，所以稍微解释一下这两个计算属性的计算方法。</font></p><blockquote><p>在这个例子中，你定义了两个计算属性 <code>totalScore</code> 和 <code>averageScore</code>，用于计算数组 <code>list</code> 中对象的 <code>score</code> 属性的总和和平均值。</p><p>让我解释一下这两个计算属性的作用：</p><ol><li><strong><code>totalScore</code> 计算属性：</strong><ul><li>通过 <code>reduce</code> 方法计算 <code>list</code> 数组中每个对象的 <code>score</code> 属性之和。</li><li><code>reduce</code> 方法接受一个回调函数 <code>(sum, item) =&gt; sum + item.score</code>，该回调函数对数组中的每个元素执行累加操作，初始值为 <code>0</code>。</li><li>最终，<code>totalScore</code> 计算属性返回了 <code>list</code> 数组中所有对象的 <code>score</code> 之和。</li></ul></li><li><strong><code>averageScore</code> 计算属性：</strong><ul><li>首先检查 <code>list</code> 数组的长度，如果为 <code>0</code>，则返回 <code>0</code>，以避免除以 <code>0</code> 的情况。</li><li>否则，通过 <code>this.totalScore / this.list.length</code> 计算平均值，并使用 <code>toFixed(2)</code> 将结果保留两位小数。</li><li>最终，<code>averageScore</code> 计算属性返回了 <code>list</code> 数组中对象的 <code>score</code> 的平均值。</li></ul></li></ol><p>这两个计算属性在模板中可以直接使用，而且由于它们依赖于 <code>list</code> 数组，当 <code>list</code> 数组发生变化时，这两个计算属性会自动重新计算，保持视图和数据的同步。这种使用计算属性的方式有助于简化模板代码，并提高代码的可读性。</p></blockquote><p>三</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【Vue】01-快速入门与Vue指令</title>
      <link href="/2023/11/23/%E3%80%90Vue%E3%80%9101-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%B8%8EVue%E6%8C%87%E4%BB%A4/"/>
      <url>/2023/11/23/%E3%80%90Vue%E3%80%9101-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%B8%8EVue%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Vue快速上手">一、Vue快速上手</h2><h3 id="（一）Vue是什么">（一）Vue是什么</h3><p><font color=#00C957>Vue 是一个用于 <strong>构建用户界面</strong> 的 <strong>渐进式</strong> <strong>框架</strong>。</font></p><p><strong>构建用户界面：</strong></p><p>就是基于数据渲染出用户看到的页面。</p><p><strong>渐进式：</strong></p><p>渐进就是循序渐进。Vue东西很多(看下图)，一次性全学完很困难，但是Vue可以学一点用一点。</p><img src="https://s2.loli.net/2023/11/23/H8FVtK4JoRrmW9P.png" style="zoom: 33%;" ><p><strong>框架：</strong></p><p>框架就意味着是一套完整的项目解决方案，可以大大提升开发效率。</p><h3 id="（二）创建实例">（二）创建实例</h3><p><font color=1E90FF><em>这章就是教你一下怎么使用Vue。注意，这里演示的是Vue2。</em></font></p><blockquote><p>创建 Vue 实例，初始化渲染的核心步骤：<br>1.准备容器<br>2.引包 (官网) - 开发版本 / 生产版本<br>3.创建 Vue 实例 new Vue()<br>4.指定配置项 el data =&gt; 渲染数据<br>① el 指定挂载点，选择器指定控制的是哪个盒子<br>② data 提供数据</p></blockquote><p>看一下具体的代码：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 这里将来会编写一些用于渲染的代码逻辑 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 引入的是开发版本包 - 包含完整的注释和警告 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 一旦引入 VueJS核心包，在全局环境，就有了 Vue 构造函数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 通过 el 配置选择器，指定 Vue 管理的是哪个盒子</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 通过 data 提供数据</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">msg</span>: <span class="string">&#x27;Hello 传智播客&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">count</span>: <span class="number">666</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="（三）插值表达式">（三）插值表达式</h3><p><font color=1E90FF>刚刚已经演示了一下通过Vue创建一个实例，并完成初始化渲染。我们进一步看一下里面的细节。</font></p><p><font color=#00C957>我们用了一个这种语法，这个其实就叫<strong>插值表达式</strong>，是Vue里的一种模板语法。</font></p><img src="https://s2.loli.net/2023/11/23/yFKpkIGqYPzONf5.png"><p><font color=#FF9911>比方说下面代码，里面都是表达式，就都可以读取出来：</font></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; nickname &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; nickname.toUpperCase() &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; nickname + &#x27;你好&#x27; &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; age &gt;= 18 ? &#x27;成年&#x27; : &#x27;未成年&#x27; &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; friend.name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; friend.desc &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment">&lt;!-- 这三种是会报错的，看PPT里写的！ --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;p&gt;&#123;&#123; hobby &#125;&#125;&lt;/p&gt; --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;p&gt;&#123;&#123; if &#125;&#125;&lt;/p&gt; --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;p title=&quot;&#123;&#123; nickname &#125;&#125;&quot;&gt;我是p标签&lt;/p&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">nickname</span>: <span class="string">&#x27;tony&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">age</span>: <span class="number">18</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">friend</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&#x27;jepson&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">desc</span>: <span class="string">&#x27;热爱学习 Vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="（四）响应式特性">（四）响应式特性</h3><p><font color=#DB7093>响应式是Vue的一个核心特性，意思是<strong>数据变化，视图自动更新</strong>。</font></p><img src="https://s2.loli.net/2023/11/23/fTdLg58x3tpCGuS.png" style="zoom: 25%;" ><p><font color=#FF9911>像图里这样，用这种方式访问data里的数据，在控制台进行修改，视图也会跟着自动变化！（底层把DOM操作封装起来了）</font></p><p><font color=#FF9911>以后我们可能就是用按钮、表单这些修改数据，表现效果上都是让视图自动变化。</font></p><p><font color=#DA70D6>聚焦于数据 → 数据驱动视图，其好处在于：</font></p><p><font color=#DA70D6>使用 Vue 开发，关注业务的核心逻辑，根据业务修改数据即可。（就是只需要关注数据就可以了！）</font></p><h3 id="（五）开发者工具">（五）开发者工具</h3><p><font color=1E90FF>刚刚我们明确了Vue的响应式特性，知道只要关注修改数据就行了。但是刚刚我们是在控制台里进行的，有没有更方便的方式进行调试呢？</font></p><img src="https://s2.loli.net/2023/11/23/xqy3zrjPAOF75VD.png" style="zoom: 33%;" ><img src="https://s2.loli.net/2023/11/23/9it4eHlDSKCLOYJ.png" style="zoom:33%;" ><p><font color=#DA70D6>注意下这个Vue栏只有在Vue的界面里才能用哦，正常是看不到的。</font></p><h2 id="二、Vue指令">二、Vue指令</h2><p>Vue 会根据不同的【指令】，针对标签实现不同的【功能】</p><p><font color=#00C957>指令：带有 v- 前缀 的 特殊 标签属性。</font></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Vue指令: 带有v-前缀的特殊标签属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;msg&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 普通标签属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><font color=#DA70D6>可以在官网的文档里找到，总共有14个这样的指令。接下来让我们慢慢学习。</font></p><h3 id="（一）v-html">（一）v-html</h3><p><font color=1E90FF>这里利用了v-html来演示，那就先了解一下这个。</font></p><blockquote><p>v-html:<br><strong>作用：</strong> 设置元素的 innerHTML<br><strong>语法：</strong> v-html = &quot;表达式 &quot;</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">msg</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">          &lt;h3&gt;学前端~来黑马！&lt;/h3&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        `</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="（二）v-show和v-if">（二）v-show和v-if</h3><img src="https://s2.loli.net/2023/11/23/uBLEM86vlXzwjV7.png" style="zoom: 33%;" ><p>两者表现效果是一样的，但是原理不一样。看PPT，前者只是单纯用css来隐藏，后者则是创建或移除这个节点了。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    v-show底层原理：切换 css 的 display: none 来控制显示隐藏</span></span><br><span class="line"><span class="comment">    v-if  底层原理：根据 判断条件 控制元素的 创建 和 移除（条件渲染）</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;flag&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>我是v-show控制的盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;flag&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>我是v-if控制的盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">flag</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果为了图方便，统一全使用v-show这种，会导致整个页面存在着大量冗余的结构，会在页面加载时造成不必要的开销。所以需要根据具体情况进行权衡。</p><h3 id="（三）v-else和v-else-if">（三）v-else和v-else-if</h3><img src="https://s2.loli.net/2023/11/23/NZnldJf4mxkKT7F.png" style="zoom:33%;" ><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;gender === 1&quot;</span>&gt;</span>性别：♂ 男<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>性别：♀ 女<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;score &gt;= 90&quot;</span>&gt;</span>成绩评定A：奖励电脑一台<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else-if</span>=<span class="string">&quot;score &gt;= 70&quot;</span>&gt;</span>成绩评定B：奖励周末郊游<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else-if</span>=<span class="string">&quot;score &gt;= 60&quot;</span>&gt;</span>成绩评定C：奖励零食礼包<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>成绩评定D：惩罚一周不能玩手机<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">gender</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">score</span>: <span class="number">95</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><font color=#DA70D6>就和其它编程语言里的if语句是一样的。</font></p><p><font color=#DA70D6><em>说实话长得好丑.jpg</em></font></p><h3 id="（四）v-on">（四）v-on</h3><p>这是事件绑定指令。</p><p>使用Vue时，如需为DOM注册事件，就可以使用v-on指令。对其基本的认识如下：</p><img src="https://s2.loli.net/2023/11/23/arVCW5H3sLw9Ipq.png" style="zoom:33%;" ><p><font color=1E90FF>我们首先介绍一下内联语句的写法。</font></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;count--&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">count</span>: <span class="number">100</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><font color=#FF9911>这个很显而易见，点击两边的按钮可以让中间的数字改变。</font></p><p><font color=1E90FF>内联语句虽然方便，但只适用于逻辑简单的场景。一旦逻辑复杂了，代码量多了，那就需要用到对应的函数了。让我们再看看使用method函数的写法。</font></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;fn&quot;</span>&gt;</span>切换显示隐藏<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>黑马程序员<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app4 = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">isShow</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        fn () &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 让提供的所有methods中的函数，this都指向当前实例</span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// console.log(&#x27;执行了fn&#x27;, app.isShow)</span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// console.log(app3 === this)</span></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">isShow</span> = !<span class="variable language_">this</span>.<span class="property">isShow</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><font color=#DA70D6>需要注意的就是，在函数中是没办法直接访问data中的数据的，所以需要通过实例（this）来进行访问。而内联语句中由于用的是模板，所以Vue能够自动识别 isShow 是该实例的一个属性，就不需要显式使用this了。</font></p><p><font color=#FF9911>除此之外，v-on绑定函数还可以进行参数传递。</font></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>小黑自动售货机<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;buy(5)&quot;</span>&gt;</span>可乐5元<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;buy(10)&quot;</span>&gt;</span>咖啡10元<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;buy(8)&quot;</span>&gt;</span>牛奶8元<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>银行卡余额：&#123;&#123; money &#125;&#125;元<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">money</span>: <span class="number">100</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        buy (price) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">money</span> -= price</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="（五）v-bind">（五）v-bind</h3><p>这是属性绑定指令。</p><img src="https://s2.loli.net/2023/11/23/gY7oazXfQUJdytq.png" style="zoom:33%;" ><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- v-bind:src   =&gt;   :src --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">&quot;imgUrl&quot;</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;msg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;imgUrl&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;msg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">imgUrl</span>: <span class="string">&#x27;./imgs/10-02.png&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">msg</span>: <span class="string">&#x27;hello 波仔&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><font color=#DA70D6>实际工作中这些属性肯定都是后端给的，不是写死的。</font></p><h3 id="（案例）综合小案例-连环画">（案例）综合小案例-连环画</h3><p><strong>需求：</strong> 就是准备一堆图片，还有两个按钮，点击下一页就下一张，点击上一页就上一张，怎么实现呢？</p><p><strong>思路：</strong> v-bind标签动态修改src就行了。把图片全放到一个list里，用index表明下标，点击按钮时更改下标就可以了。</p><p><strong>代码如下：</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-show</span>=<span class="string">&quot;index &gt; 0&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;index--&quot;</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;list[index]&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-show</span>=<span class="string">&quot;index &lt; list.length - 1&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;index++&quot;</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">index</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">list</span>: [</span></span><br><span class="line"><span class="language-javascript">          <span class="string">&#x27;./imgs/11-00.gif&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="string">&#x27;./imgs/11-01.gif&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="string">&#x27;./imgs/11-02.gif&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="string">&#x27;./imgs/11-03.gif&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="string">&#x27;./imgs/11-04.png&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="string">&#x27;./imgs/11-05.png&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><font color=#DB7093>注意一下这个v-show是为了到达第一张或者最后一张时，就得对按钮进行隐藏。</font></p><h3 id="（六）v-for">（六）v-for</h3><p>这是列表渲染指令。</p><p>Vue 提供了 v-for 列表渲染指令，用来辅助开发者基于一个数组来循环渲染一个列表结构。</p><p>v-for 指令需要使用 <code>(item, index) in arr</code> 形式的特殊语法，其中：</p><ul><li>item 是数组中的每一项</li><li>index 是每一项的索引，不需要可以省略</li><li>arr 是被遍历的数组</li></ul><p>此语法也可以遍历<strong>对象和数字</strong>。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>小黑水果店<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in list&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123; item &#125;&#125; - &#123;&#123; index &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in list&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123; item &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">list</span>: [<span class="string">&#x27;西瓜&#x27;</span>, <span class="string">&#x27;苹果&#x27;</span>, <span class="string">&#x27;鸭梨&#x27;</span>, <span class="string">&#x27;榴莲&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><font color=#DB7093>里面那个item in list是简写的方法。</font></p><h3 id="（案例）综合小案例-小黑的书架">（案例）综合小案例-小黑的书架</h3><img src="https://s2.loli.net/2023/11/23/Kzk7Zgysnx9JVcB.png" style="zoom:33%;" ><p><strong>需求：</strong> 就是给了个列表，模拟书架，可以点删除把书架移掉。</p><p><strong>思路：</strong> 就用刚刚学的v-for进行列表渲染，把内容都放到list里再渲染就好了。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>小黑的书架<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in booksList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; item.author &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注册点击事件 →  通过 id 进行删除数组中的 对应项 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;del(item.id)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">booksList</span>: [</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;《红楼梦》&#x27;</span>, <span class="attr">author</span>: <span class="string">&#x27;曹雪芹&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;《西游记》&#x27;</span>, <span class="attr">author</span>: <span class="string">&#x27;吴承恩&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;《水浒传》&#x27;</span>, <span class="attr">author</span>: <span class="string">&#x27;施耐庵&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">&#x27;《三国演义》&#x27;</span>, <span class="attr">author</span>: <span class="string">&#x27;罗贯中&#x27;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        del (id) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 通过 id 进行删除数组中的 对应项 → filter(不会改变原数组)</span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// filter: 根据条件，保留满足条件的对应项，得到一个新数组。</span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// console.log(this.booksList.filter(item =&gt; item.id !== id))</span></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">booksList</span> = <span class="variable language_">this</span>.<span class="property">booksList</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">id</span> !== id)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><font color=#DB7093>重点：这里注意一下这个v-for 中的 key。</font></p><p><font color=#DB7093>其作用是给元素添加的唯一标识。</font></p><blockquote><p><code>key</code> 是在使用 <code>v-for</code> 指令时提供的一个特殊属性，用于帮助Vue识别每个列表项的唯一性，以便更高效地更新虚拟DOM。当 Vue 更新由 <code>v-for</code> 渲染的元素列表时，它会尽量以最小的开销更新DOM。<code>key</code> 的主要作用是帮助Vue识别列表中每个项的身份，以便在重新渲染时更准确地追踪每个项的变化。</p><p>在使用 <code>v-for</code> 进行列表渲染时，每个渲染的元素都应该有一个唯一的 <code>key</code> 属性。这有助于Vue在进行 DOM 操作时，准确追踪每个元素的状态变化，从而提高渲染效率。</p></blockquote><p><font color=#DA70D6>不加的话在有的情况下会出现各种渲染上的问题，因为Vue会无法确定每个项的唯一性。</font></p><p><font color=#DA70D6>实际开发中一般就把这种id作为key。</font></p><h3 id="（七）v-model">（七）v-model</h3><p>这是双向绑定指令。</p><img src="https://s2.loli.net/2023/11/23/G2pNAUergcDq6LY.png" style="zoom:50%;" ><p><font color=#DB7093>这个指令以后会非常常用！它可以实现你在页面上输入什么，数据也自动变化成什么，同理数据变化视图也跟着变化，从而双向绑定！</font></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">      v-model 可以让数据和视图，形成双向数据绑定</span></span><br><span class="line"><span class="comment">      (1) 数据变化，视图自动更新</span></span><br><span class="line"><span class="comment">      (2) 视图变化，数据自动更新</span></span><br><span class="line"><span class="comment">      可以快速[获取]或[设置]表单元素的内容</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    账户：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;password&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;login&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;reset&quot;</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">password</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        login () &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">username</span>, <span class="variable language_">this</span>.<span class="property">password</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        reset () &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">username</span> = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">password</span> = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JavaScript】01-JavaScript基础</title>
      <link href="/2023/10/15/%E3%80%90JavaScript%E3%80%9101-JavaScript%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/10/15/%E3%80%90JavaScript%E3%80%9101-JavaScript%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="一、JavaScript-介绍">一、JavaScript 介绍</h2><p><font color=#DA70D6><em>感觉不用多解释什么，就直接复制PPT里的内容了.jpg。</em></font></p><h3 id="（一）基本概念">（一）基本概念</h3><h4 id="1-JavaScript-（是什么？）">1.JavaScript （是什么？）</h4><p>是一种 <strong>运行在客户端（浏览器）</strong> 的编程语言，实现人机交互效果。</p><h4 id="2-作用（做什么？）">2.作用（做什么？）</h4><ul><li>网页特效 (监听用户的一些行为让网页作出对应的反馈)</li><li>表单验证 (针对表单数据的合法性进行判断)</li><li>数据交互 (获取后台的数据, 渲染到前端)</li><li>服务端编程 (node.js)</li></ul><h4 id="3-JavaScript的组成（有什么？）">3.JavaScript的组成（有什么？）</h4><ul><li><p>ECMAScript：规定了js基础语法核心知识。<br>比如：变量、分支语句、循环语句、对象等等</p></li><li><p>Web APIs :</p><ul><li>DOM 操作文档，比如对页面元素进行移动、大小、添加删除等操作；</li><li>BOM 操作浏览器，比如页面弹窗，检测窗口宽度、存储数据到浏览器等等</li></ul></li></ul><img src="https://s2.loli.net/2023/10/09/lSELmVWZjp4I1r9.png" style="zoom:33%;" ><h3 id="（二）书写位置">（二）书写位置</h3><h4 id="1-引入方式">1.引入方式</h4><p>JavaScript 程序不能独立运行，它需要被嵌入 HTML 中，然后浏览器才能执行 JavaScript 代码。通过 script 标签将 JavaScript 代码引入到 HTML 中，有两种方式：</p><h5 id="1-1-内部形式">1.1 内部形式</h5><p>通过 script 标签包裹 JavaScript 代码。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 内部js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 页面弹出警示框</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&#x27;你好，js~&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><font color=#DB7093>其实这个script标签和css的style标签一样，理论上放在html的哪个地方都行，但一般规范来说是放在body标签里。</font></p><h5 id="1-2-外部形式">1.2 外部形式</h5><p>一般将 JavaScript 代码写在独立的以 .js 结尾的文件中，然后通过 script 标签的 src 属性引入。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/my.js&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 中间不要写内容</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><font color=#DB7093>这里中间写了内容也会被忽略掉的。</font></p><h5 id="1-3-内联式">1.3 内联式</h5><p>代码写在标签内部。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;click&#x27;)&quot;</span>&gt;</span>点击我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p><font color=#DB7093>这种作了解即可。不过vue框架里会用这种模式。</font></p><h3 id="（三）注释与结束符">（三）注释与结束符</h3><p><font color=#87CEEB>介绍了一下注释和结束符。注释感觉没什么好说的，就单行和多行。看一下结束符就好。</font></p><p>结束符：</p><ul><li><strong>作用：</strong> 使用英文的 ; 代表语句结束</li><li><strong>实际情况：</strong> 实际开发中，可写可不写, 浏览器(JavaScript 引擎) 可以自动推断语句的结束位置</li><li><strong>现状：</strong> 在实际开发中，越来越多的人主张，书写 JavaScript 代码时省略结束符</li><li>**约定：**为了风格统一，结束符要么每句都写，要么每句都不写（按照团队要求.）</li></ul><h3 id="（四）输入与输出">（四）输入与输出</h3><img src="https://s2.loli.net/2023/10/09/5oRuwP31qfvYHyj.png" style="zoom: 50%;" ><img src="https://s2.loli.net/2023/10/09/CbvGU5a2uMs8qRr.png" style="zoom: 50%;" ><p><strong>JavaScript 代码执行顺序：</strong></p><ul><li>按HTML文档流顺序执行JavaScript代码</li><li>alert() 和 prompt() 它们会跳过页面渲染先被执行（目前作为了解，后期讲解详细执行过程）</li></ul><h2 id="二、变量">二、变量</h2><p><font color=#DA70D6><em>接触过别的编程语言，这一块应该也相对熟悉了，随便看看就好了，笔记就直接复制PPT里的内容了.jpg。</em></font></p><h3 id="（一）什么是变量？">（一）什么是变量？</h3><p>变量是计算机中用来 <strong>存储数据</strong> 的“容器”，它可以让计算机变得有记忆。</p><h3 id="（二）变量的基本使用">（二）变量的基本使用</h3><p>声明(定义)变量有两部分构成：声明关键字、变量名（标识）。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 声明一个年龄变量</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// let age</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// // 2. 赋值   =  赋值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// age = 18</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(age)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3. 声明的同时直接赋值  变量的初始化</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// let age = 18</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 小案例</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> num = <span class="number">20</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> uname = <span class="string">&#x27;pink老师&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(uname)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>let</code> 和 <code>var</code> 都是 JavaScript 中的声明变量的关键字，推荐使用 <code>let</code> 声明变量！！！</p><blockquote><p>JavaScript 使用专门的关键字 let 和 var 来声明（定义）变量，在使用时需要注意一些细节：</p><p>以下是使用 let 时的注意事项：</p><ul><li>允许声明和赋值同时进行<br>不允许重复声明<br>允许同时声明多个变量并赋值<br>JavaScript 中内置的一些关键字不能被当做变量名</li></ul><p>以下是使用 var 时的注意事项：</p><ul><li>允许声明和赋值同时进行<br>允许重复声明<br>允许同时声明多个变量并赋值</li></ul><p>大部分情况使用 let 和 var 区别不大，但是 let 相较 var 更严谨，因此推荐使用 let，后期会更进一步介绍二者间的区别。</p></blockquote><p><font color=#DB7093>按pink老师的说法，var 就是个bug，别迷恋它了，以后声明变量我们统一使用 let。</font></p><h3 id="（三）变量扩展-数组">（三）变量扩展-数组</h3><p><font color=#87CEEB>PPT里说数组是一种将 <strong>一组数据存储在单个变量名下</strong> 的优雅方式。可能这就是数组放在这里的原因吧。</font></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// let arr = [10, 20, 30]</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 声明数组 有序 </span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> arr = [<span class="string">&#x27;刘德华&#x27;</span>, <span class="string">&#x27;张学友&#x27;</span>, <span class="string">&#x27;黎明&#x27;</span>, <span class="string">&#x27;郭富城&#x27;</span>, <span class="string">&#x27;pink老师&#x27;</span>, <span class="number">10</span>]</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 使用数组  数组名[索引号] 从0</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(arr)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">0</span>]) <span class="comment">// 刘德华</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">4</span>])</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3. 数组长度 =  索引号 + 1 </span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">length</span>)  <span class="comment">// 6</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三、常量">三、常量</h2><p><font color=#DA70D6><em>一张PPT讲完。</em></font></p><img src="https://s2.loli.net/2023/10/09/MYPOeNAax6yZskJ.png" style="zoom:50%;" ><h2 id="四、数据类型">四、数据类型</h2><img src="https://s2.loli.net/2023/10/09/Kquj4wVUT2SBv39.png" style="zoom:50%;" ><p><font color=#87CEEB>js的数据类型相比别的编程语言可以说是少了许多。下面一个一个讲一下。</font></p><blockquote><p>注意：</p><p>JS 是弱数据类型，变量到底属于那种类型，只有赋值之后，我们才能确认</p><p>Java是强数据类型 例如 int a = 3 必须是整数</p></blockquote><h3 id="（一）数字型-number">（一）数字型(number)</h3><p><font color=#00C957>JavaScript 中的正数、负数、小数等 统一称为 数字类型。</font></p><p>数字可以有很多操作，比如，乘法 * 、除法 / 、加法 + 、减法 - 等等，所以经常和算术运算符一起。</p><p>数学运算符也叫<strong>算术运算符</strong>，主要包括加、减、乘、除、取余（求模）。注意一下优先级即可。</p><p><font color=#FF9911>这里感觉值得提一下的就是NaN。</font></p><ul><li><p>NaN 代表一个计算错误。它是一个不正确的或者一个未定义的数学操作所得到的结果</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;老师&#x27;</span> - <span class="number">2</span>) <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure></li><li><p>NaN 是粘性的。任何对 NaN 的操作都会返回 NaN</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> + <span class="number">2</span>) <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="（二）字符串型-string">（二）字符串型(string)</h3><p><font color=#00C957>通过单引号（’ '） 、双引号（&quot; &quot;）或反引号(`) 包裹的数据都叫字符串，单引号和双引号没有本质上的区别，推荐使用单引号。</font></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> uname = <span class="string">&#x27;小明&#x27;</span> <span class="comment">// 使用单引号</span></span><br><span class="line"><span class="keyword">let</span> gender = <span class="string">&quot;男&quot;</span> <span class="comment">// 使用双引号</span></span><br><span class="line"><span class="keyword">let</span> goods = <span class="string">`小米`</span> <span class="comment">// 使用反引号</span></span><br><span class="line"><span class="keyword">let</span> tel = <span class="string">&#x27;10086&#x27;</span> <span class="comment">// 看着像数字，但用引号包裹就是字符串</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span> <span class="comment">// 这种情况叫空字符串</span></span><br></pre></td></tr></table></figure><p><font color=#FF9911>这里主要介绍一下模板字符串吧。</font></p><p>一般的字符串拼接我们都熟，大概长这么样：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="number">25</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;我今年&#x27;</span> + age + <span class="string">&#x27;岁了&#x27;</span>)</span><br></pre></td></tr></table></figure><p>虽然别的语言（对就是Java）也是这样写的，但这个其实还是有点麻烦的。我们整简单一点的话，就可以用上 <strong>模板字符串</strong> ：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模板字符串 外面用`` 里面 $&#123;变量名&#125;</span></span><br><span class="line"><span class="keyword">let</span> uname = <span class="title function_">prompt</span>(<span class="string">&#x27;请输入您的姓名:&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> age = <span class="title function_">prompt</span>(<span class="string">&#x27;请输入您的年龄:&#x27;</span>)</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`大家好，我叫<span class="subst">$&#123;uname&#125;</span>， 我今年贵庚<span class="subst">$&#123;age&#125;</span>岁了`</span>)</span><br></pre></td></tr></table></figure><p><font color=#DB7093>就是注意两个点吧，一个是外面用反引号，一个是里面的具体形式。</font></p><h3 id="（三）布尔类型（boolean）">（三）布尔类型（boolean）</h3><p><font color=#00C957>就两个，true 或者 false。</font></p><h3 id="（四）未定义类型（undefined）">（四）未定义类型（undefined）</h3><p><font color=#00C957>未定义是比较特殊的类型，只有一个值 undefined。</font></p><p><strong>什么情况出现未定义类型？</strong></p><p>只声明变量，不赋值的情况下，变量的默认值为 undefined，一般很少【直接】为某个变量赋值为 undefined。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> age</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(age) <span class="comment">// 输出为undefined</span></span><br></pre></td></tr></table></figure><p><strong>工作中的使用场景：</strong></p><p>我们开发中经常声明一个变量，等待传送过来的数据。</p><p>如果我们不知道这个数据是否传递过来，此时我们可以通过检测这个变量是不是undefined，就判断用户是否有数据传递过来。</p><h3 id="（五）null（空类型）">（五）null（空类型）</h3><p><font color=#00C957>JavaScript 中的 null 仅仅是一个代表“无”、“空”或“值未知”的特殊值。</font></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = <span class="literal">null</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj) <span class="comment">// null</span></span><br></pre></td></tr></table></figure><p><strong>null 和 undefined 区别：</strong></p><ul><li>undefined 表示没有赋值</li><li>null 表示赋值了，但是内容为空</li></ul><p><strong>null 开发中的使用场景：</strong></p><p>官方解释：把 null 作为尚未创建的对象</p><p>大白话： 将来有个变量里面存放的是一个对象，但是对象还没创建好，可以先给个null</p><p><font color=#DB7093>这里可以稍微演示一下：</font></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(undeined + <span class="number">1</span>) <span class="comment">// NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> + <span class="number">1</span>) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p><em><font color=#87CEEB>题外话，这玩意其实本身是不合理的。就像var一样，想取消掉这玩意太麻烦了，就一直留下来了。</font></em></p><h3 id="（六）类型转换">（六）类型转换</h3><p><font color=#87CEEB>前面介绍了各种数据类型。但我们发现，由于JavaScript是弱数据类型，这就会在使用的时候留下很多坑，比如：</font></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;10000&#x27;</span> + <span class="string">&#x27;2000&#x27;</span>) <span class="comment">// 输出结果为100002000</span></span><br></pre></td></tr></table></figure><p>这时候我们就需要类型转换了。</p><h4 id="6-1-隐式转换">6.1 隐式转换</h4><p><strong>规则：</strong></p><ul><li>+号两边只要有一个是字符串，都会把另外一个转成字符串</li><li>除了+以外的算术运算符 比如 - * / 等都会把数据转成数字类型</li></ul><p><strong>缺点：</strong></p><ul><li>转换类型不明确，靠经验才能总结</li></ul><p><strong><font color=#DB7093>小技巧：</font></strong></p><ul><li>+号作为正号解析可以转换成数字型</li><li>任何数据和字符串相加结果都是字符串</li></ul><p><em><font color=#DA70D6>其实把下面这张图都看懂了，就知道上面的内容了：</font></em></p><img src="https://s2.loli.net/2023/10/11/fzJFBRlpdyvjexE.png" style="zoom:50%;" ><p><font color=#DA70D6>当然这种隐式转换不容易记住，需要长期经验的积累总结，也很容易踩到各种坑。</font></p><h4 id="6-2-显式转换">6.2 显式转换</h4><p><font color=#87CEEB>编写程序时过度依靠系统内部的隐式转换是不严谨的，因为隐式转换规律并不清晰，大多是靠经验总结的规律。</font></p><p><font color=#87CEEB>为了避免因隐式转换带来的问题，通常根据逻辑需要对数据进行显式转换。</font></p><p><font color=#FF9911>这里主要就介绍三种：</font></p><ul><li>Number(数据)<ul><li>转成数字类型</li><li>如果字符串内容里有非数字，转换失败时结果为 NaN（Not a Number）即不是一个数字</li><li>NaN也是number类型的数据，代表非数字</li></ul></li><li>parseInt(数据)<ul><li>只保留整数</li></ul></li><li>parseFloat(数据)<ul><li>可以保留小数</li></ul></li></ul><p><font color=#DA70D6><em>同样的，把下面这张图看懂了，就理解上面内容了。（左边一些注释是错的，主要看右边的输出结果）</em></font></p><img src="https://s2.loli.net/2023/10/11/aJWNDgiCLGqwcYe.png"><p><font color=#DA70D6>像这种结尾带着px的，以数字开头的，主要是出现在CSS里，用这种显式转换以后就可以和CSS一起用了。</font></p><h2 id="五、运算符">五、运算符</h2><p><font color=#DA70D6><em>和别的编程语言几乎没区别，过一下就好。</em></font></p><h3 id="（一）赋值运算符">（一）赋值运算符</h3><p><em>就=。还有+=，-=，</em>=，/=，%=这些。*</p><h3 id="（二）一元运算符">（二）一元运算符</h3><p><font color=#00C957>只需要一个表达式就可以运算的运算符叫一元运算符。</font></p><p><em>主要就介绍了自增、自减</em></p><h3 id="（三）比较运算符">（三）比较运算符</h3><p><font color=#87CEEB>重点就关注标红的那几个：</font></p><img src="https://s2.loli.net/2023/10/11/l4VsobwzY1AjWXp.png" style="zoom:50%;" ><p><font color=#87CEEB>注意一点小细节：</font></p><img src="https://s2.loli.net/2023/10/11/O67vYQfPTVCqxZG.png" style="zoom:33%;" ><h3 id="（四）逻辑运算符">（四）逻辑运算符</h3><p><em>就与或非</em></p><p><font color=#DB7093>**重点：**但这里要说明的是，JavaScript的逻辑运算符两边是可以是表达式的，例如：</font></p><p>逻辑与：</p><ul><li>语法：表达式1&amp;&amp;表达式2</li><li>如果第一个表达式的值为真，则返回表达式2</li><li>如果第一个表达式的值为假，则返回表达式1</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">231</span> &amp;&amp; <span class="number">789</span>) <span class="comment">// 789</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span> &amp;&amp; <span class="number">789</span>) <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p>逻辑或：</p><ul><li>语法：表达式1||表达式2</li><li>如果表达式1 结果为真，则返回表达式1</li><li>如果表达式1 结果为假，则返回表达式2</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">387</span> || <span class="number">618</span>) <span class="comment">// 387</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span> || <span class="number">618</span>) <span class="comment">// 618</span></span><br></pre></td></tr></table></figure><p><strong>记忆</strong>： <strong>‘’ 、0、undefined、null、false、NaN 转换为布尔值后都是false, 其余则为 true</strong></p><img src="https://s2.loli.net/2023/10/12/41YuEIM8rpBLmiO.png"><p><font color=#DA70D6>这一块和Java是很不一样的！Java的逻辑短路运算符两边必须是布尔型。</font></p><p>PS：上面记忆的这些和数字的转换有一个隐式的规则。</p><ul><li>null 经过数字转换之后会变为 0<br>undefined 经过数字转换之后会变为 NaN<br>空字符串 经过数字转换之后会变为 0</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&#x27;</span> - <span class="number">1</span>) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;pink老师&#x27;</span> - <span class="number">1</span>) <span class="comment">// NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> - <span class="number">1</span>) <span class="comment">// -1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span> - <span class="number">1</span>) <span class="comment">// NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> - <span class="number">1</span>) <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><h3 id="（五）运算符优先级">（五）运算符优先级</h3><p><font color=#87CEEB>和别的编程语言一样，不用刻意去记的东西。</font></p><img src="https://s2.loli.net/2023/10/11/BMG8qLt9TwaNuAF.png" style="zoom:50%;" ><p><strong><font color=#DA70D6>总结一下，这里唯一要注意的就是那个==和===，别的都和我个人熟悉的Java差不多。</font></strong></p><h2 id="六、语句">六、语句</h2><p><font color=#87CEEB>先介绍一下什么是语句。这里说明一下表达式和语句的区别：</font></p><ul><li><strong>表达式</strong>是可以被求值的代码，JavaScript 引擎会将其计算出一个结果；<ul><li>例如，x = 7，3 + 4这种，都是表达式</li></ul></li><li><strong>语句</strong>是一段可以执行的代码<ul><li>例如，prompt()可以弹出一个输入框，这种都是语句</li></ul></li></ul><p><font color=#DA70D6><em>然后主要就介绍了顺序、分支、循环语句。这里就略过了。</em></font></p><h2 id="七、数组">七、数组</h2><p><font color=#87CEEB>基本概念这些就不一一介绍了。这里就记一些可能有用的。</font></p><h3 id="7-1-数组定义">7.1 数组定义</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 语法，使用 [] 来定义一个空数组</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 定义一个空数组，然后赋值给变量 classes</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// let classes = [];</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. 定义非空数组</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> classes = [<span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;小刚&#x27;</span>, <span class="string">&#x27;小红&#x27;</span>, <span class="string">&#x27;小丽&#x27;</span>, <span class="string">&#x27;小米&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过 <code>[]</code> 定义数组，数据中可以存放真正的数据，如小明、小刚、小红等这些都是数组中的数据，我们这些数据称为数组单元，数组单元之间使用英文逗号分隔。</p><p>数组做为数据的集合，它的单元值可以是<strong>任意数据类型</strong>。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 6. 数组单值类型可以是任意数据类型</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// a) 数组单元值的类型为字符类型</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> list = [<span class="string">&#x27;HTML&#x27;</span>, <span class="string">&#x27;CSS&#x27;</span>, <span class="string">&#x27;JavaScript&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// b) 数组单元值的类型为数值类型</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> scores = [<span class="number">78</span>, <span class="number">84</span>, <span class="number">70</span>, <span class="number">62</span>, <span class="number">75</span>]</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// c) 混合多种类型</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> mixin = [<span class="literal">true</span>, <span class="number">1</span>, <span class="literal">false</span>, <span class="string">&#x27;hello&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>重申一次，数组在 JavaScript 中并不是新的数据类型，它属于对象类型。</strong></p><h3 id="7-2-操作数组">7.2 操作数组</h3><p>数组做为对象数据类型，不但有 <code>length</code> 属性可以使用，还提供了许多方法：</p><ol><li>push 动态向数组的尾部添加一个单元</li><li>unshit 动态向数组头部添加一个单元</li><li>pop 删除最后一个单元</li><li>shift 删除第一个单元</li><li>splice 动态删除任意单元</li></ol><p>使用以上4个方法时，都是直接在原数组上进行操作，即成功调任何一个方法，原数组都跟着发生相应的改变。并且在添加或删除单元时 <code>length</code> 并不会发生错乱。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 定义一个数组</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> arr = [<span class="string">&#x27;html&#x27;</span>, <span class="string">&#x27;css&#x27;</span>, <span class="string">&#x27;javascript&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. push 动态向数组的尾部添加一个单元，并返回该数组的新长度</span></span></span><br><span class="line"><span class="language-javascript">  arr.<span class="title function_">push</span>(<span class="string">&#x27;Nodejs&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span></span><br><span class="line"><span class="language-javascript">  arr.<span class="title function_">push</span>(<span class="string">&#x27;Vue&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. unshit 动态向数组头部添加单元，并返回该数组的新长度</span></span></span><br><span class="line"><span class="language-javascript">  arr.<span class="title function_">unshift</span>(<span class="string">&#x27;VS Code&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  arr.<span class="title function_">unshift</span>(<span class="string">&#x27;pink&#x27;</span>, <span class="string">&#x27;hot pink&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 3. splice 动态删除任意单元</span></span></span><br><span class="line"><span class="language-javascript">  arr.<span class="title function_">splice</span>(<span class="number">2</span>, <span class="number">1</span>) <span class="comment">// 从索引值为2的位置开始删除1个单元</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 4. pop 删除最后一个单元，并返回该元素的值</span></span></span><br><span class="line"><span class="language-javascript">  arr.<span class="title function_">pop</span>()</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 5. shift 删除第一个单元，并返回该元素的值</span></span></span><br><span class="line"><span class="language-javascript">  arr.<span class="title function_">shift</span>()</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><font color=#DA70D6><em>然后就介绍了一下冒泡排序之类的。</em></font></p><h2 id="八、函数">八、函数</h2><p><font color=#DA70D6><em>感觉老师的笔记里写得挺好的，内容也比较基础，就不怎么看视频，直接对着笔记抄了。</em></font></p><h3 id="8-1-为什么要函数？">8.1 为什么要函数？</h3><p>函数可以把具有相同或相似逻辑的代码“包裹”起来，通过函数调用执行这些被“包裹”的代码逻辑，这么做的优势是有利于精简代码方便复用。</p><h3 id="8-2-声明和调用">8.2 声明和调用</h3><p>声明（定义）一个完整函数包括关键字、函数名、形式参数、函数体、返回值5个部分。</p><img src="https://s2.loli.net/2023/10/11/HCvV26jeD5rUsaJ.jpg" style="zoom: 33%;" ><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 声明（定义）了最简单的函数，既没有形式参数，也没有返回值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;嗨~&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 函数调用，这些函数体内的代码逻辑会被执行</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 函数名()</span></span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">sayHi</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 可以重复被调用，多少次都可以</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">sayHi</span>()</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-3-参数">8.3 参数</h3><p>通过向函数传递参数，可以让函数更加灵活多变，参数可以理解成是一个变量。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 声明（定义）一个功能为打招呼的函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// function sayHi() &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   console.log(&#x27;嗨~&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 调用函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// sayHi()</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这个函数似乎没有什么价值，除非能够向不同的人打招呼</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这就需要借助参数来实现了</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params">name</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 参数 name 可以被理解成是一个变量</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;嗨~&#x27;</span> + name)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 调用 sayHi 函数，括号中多了 &#x27;小明&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这时相当于为参数 name 赋值了</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">sayHi</span>(<span class="string">&#x27;小明&#x27;</span>)<span class="comment">// 结果为 小明</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 再次调用 sayHi 函数，括号中多了 &#x27;小红&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这时相当于为参数 name 赋值了</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">sayHi</span>(<span class="string">&#x27;小红&#x27;</span>) <span class="comment">// 结果为 小红</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><ol><li>声明（定义）函数时的形参没有数量限制，当有多个形参时使用 <code>,</code> 分隔</li><li>调用函数传递的实参要与形参的顺序一致</li></ol><p><strong>细节：</strong></p><p><font color=#DB7093>如果没有传实参，那就会变成默认的undefined。</font></p><p><font color=#DB7093>我们可以改进下，用户不输入实参，可以给 <strong>形参默认值</strong>，可以默认为 0, 这样程序更严谨，可以如下操作：</font></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getSum</span>(<span class="params">x = <span class="number">0</span>, y = <span class="number">0</span></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-4-返回值">8.4 返回值</h3><p>函数的本质是封装（包裹），函数体内的逻辑执行完毕后，函数外部如何获得函数内部的执行结果呢？要想获得函数内部逻辑的执行结果，需要通过 <code>return</code> 这个关键字，将内部执行结果传递到函数外部，这个被传递到外部的结果就是返回值。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 定义求和函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">count</span>(<span class="params">a, b</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> s = a + b</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// s 即为 a + b 的结果</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 通过 return 将 s 传递到外部</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> s</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 调用函数，如果一个函数有返回值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 那么可将这个返回值赋值给外部的任意变量</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> total = <span class="title function_">count</span>(<span class="number">5</span>, <span class="number">12</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>细节：</strong></p><p><font color=#DB7093>return函数可以没有 return，这种情况函数默认返回值为 undefined。</font></p><h3 id="8-5-作用域">8.5 作用域</h3><p>通常来说，一段程序代码中所用到的名字并不总是有效和可用的，而限定这个名字的可用性的代码范围就是这个名字的作用域。</p><p><font color=#87CEEB>这里就是简单介绍了一下全局作用域和局部作用域。</font></p><p><font color=#87CEEB>放script大标签下或者单独的js文件里的就是全局作用域。在全局作用域里的变量就是全局变量，大伙都能用。反过来在某个函数内的这种就叫局部作用域，里面的就是局部变量。</font></p><p><strong>一个小坑：</strong></p><p><font color=#DB7093>如果函数内部，变量没有声明，直接赋值，也当全局变量看，但是强烈不推荐。</font></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    num = <span class="number">10</span>  <span class="comment">// 全局变量来看  强烈不允许</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br></pre></td></tr></table></figure><p>这个也可以打印出来。但强烈不建议这样做。</p><p><font color=#FF9911>变量的访问原则：</font> <strong>先局部，再整体。就近原则。</strong></p><h3 id="8-6-匿名函数">8.6 匿名函数</h3><p>函数可以分为具名函数和匿名函数。</p><p><font color=#00C957>**匿名函数：**没有名字的函数，无法直接使用。</font></p><p><font color=#FF9911>那么怎么用的？有<strong>函数表达式</strong>和<strong>立即执行</strong>两种用法。</font></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.函数表达式</span></span><br><span class="line"><span class="comment">// 将匿名函数赋值给一个变量，并且通过变量名称进行调用 我们将这个称为函数表达式</span></span><br><span class="line"><span class="comment">// 声明</span></span><br><span class="line"><span class="keyword">let</span> fn = <span class="keyword">function</span>(<span class="params"></span>) &#123; </span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;函数表达式&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="title function_">fn</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这种在以后web API里会经常见到</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.立即执行</span></span><br><span class="line"><span class="comment">// 2.1 第一种写法</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params">x, y</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x + y)</span><br><span class="line">    &#125;)(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// (function()&#123;&#125;)();</span></span><br><span class="line"><span class="comment">// 2.2 第二种写法</span></span><br><span class="line"><span class="comment">// (function () &#123; &#125;());</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params">x, y</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x + y)</span><br><span class="line">&#125;(<span class="number">1</span>, <span class="number">3</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这种就会立刻执行</span></span><br><span class="line"><span class="comment">// 注意！这个必须要加分号</span></span><br></pre></td></tr></table></figure><h2 id="九、对象">九、对象</h2><h3 id="9-1-什么是对象">9.1 什么是对象</h3><p><font color=#00C957>对象是 JavaScript 数据类型的一种，之前已经学习了数值类型、字符串类型、布尔类型、undefined。对象数据类型可以被理解成是一种数据集合。它由属性和方法两部分构成。</font></p><h3 id="9-2-对象的使用">9.2 对象的使用</h3><h4 id="9-2-1-对象声明">9.2.1 对象声明</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 有两种声明方式</span></span><br><span class="line"><span class="keyword">let</span> 对象名 = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> 对象名 = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line"><span class="comment">// 例如：</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;&#125;</span><br><span class="line"><span class="comment">//实际开发中，我们多用花括号。&#123;&#125; 是对象字面量</span></span><br></pre></td></tr></table></figure><h4 id="9-2-2-对象属性的增删改查">9.2.2 对象属性的增删改查</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">uname</span>: <span class="string">&#x27;pink老师&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">gender</span>: <span class="string">&#x27;女&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.属性-查</span></span><br><span class="line"><span class="comment">// 语法：对象名.属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">uname</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">age</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">gender</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.属性-改</span></span><br><span class="line"><span class="comment">// 语法：对象名.属性 = 新值</span></span><br><span class="line">person.<span class="property">gender</span> = <span class="string">&#x27;男&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">gender</span>) <span class="comment">// 男</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.属性-增</span></span><br><span class="line">person.<span class="property">address</span> = <span class="string">&#x27;武汉&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person) <span class="comment">// 会发现增加了address这个属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.属性-删(了解)</span></span><br><span class="line"><span class="comment">// 这个简单了解下就好，因为严格模式里这个不给用</span></span><br><span class="line"><span class="keyword">delete</span> person.<span class="property">age</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person) <span class="comment">// 会发现删除了age这个属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后这里说明一下查的另外一种写法</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="string">&#x27;goods-name&#x27;</span>: <span class="string">&#x27;小米10青春版&#x27;</span>, <span class="comment">// 必须有引号，不然报错</span></span><br><span class="line">    <span class="attr">num</span>: <span class="string">&#x27;100012816024&#x27;</span>,</span><br><span class="line">    <span class="attr">weight</span>: <span class="string">&#x27;0.55kg&#x27;</span>,</span><br><span class="line">    <span class="attr">address</span>: <span class="string">&#x27;中国大陆&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 注意，这里属性里带着中划线的</span></span><br><span class="line"><span class="comment">// 这种不能直接对象名.属性名，不然会解析成obj.goods - name，输出NaN</span></span><br><span class="line"><span class="comment">// 这种就要用到查的另外一种方式</span></span><br><span class="line"><span class="comment">// 对象名[&#x27;属性名&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[<span class="string">&#x27;goods-name&#x27;</span>])</span><br><span class="line"><span class="comment">// 注意这个一定要加引号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 后期不同场景会使用不同的查的方式</span></span><br></pre></td></tr></table></figure><h4 id="9-2-3-对象中的方法">9.2.3 对象中的方法</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">uname</span>: <span class="string">&#x27;刘德华&#x27;</span>,</span><br><span class="line">    <span class="comment">// 方法</span></span><br><span class="line">    <span class="attr">song</span>: <span class="keyword">function</span> (<span class="params">x, y</span>) &#123;</span><br><span class="line">        <span class="comment">// console.log(&#x27;冰雨&#x27;)</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(x + y)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">dance</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方法调用 对象名.方法名</span></span><br><span class="line"><span class="comment">// console.log(obj.song(1, 2))</span></span><br><span class="line">obj.<span class="title function_">song</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="9-3-对象的遍历">9.3 对象的遍历</h3><p><font color=#87CEEB>首先我们思考一下，for 遍历对象会有什么问题？</font></p><ul><li>对象没有像数组一样的 length 属性，所以无法确定长度；</li><li>对象里面是无序的键值对，没有规律，不像数组里面有规律的下标</li></ul><p><font color=#FF9911>所以这里我们再教一种语法，使用for…in的语法来。我们首先以数组为例：</font></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;pink&#x27;</span>, <span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> arr) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(k)  <span class="comment">// 数组的下标 索引号  但是是字符串 &#x27;0&#x27;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[k])  <span class="comment">// arr[k]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color=#DB7093>说明一下，实际开发中不会用for…in这种语法来遍历数组，只会用来遍历对象。</font></p><p><font color=#FF9911>遍历对象就可以这样同理：</font></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">uname</span>: <span class="string">&#x27;pink老师&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 遍历对象</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(k) <span class="comment">// 属性名  &#x27;uname&#x27;   &#x27;age&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj[k])  <span class="comment">// 输出属性值  obj[k]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重点！！！这里要注意一下</span></span><br><span class="line"><span class="comment">// 由于 k 是变量, 所以必须使用 [] 语法解析</span></span><br><span class="line"><span class="comment">// 如果写成obj.k，那相当于obj.&#x27;uname&#x27;，所以输出会是undefined</span></span><br></pre></td></tr></table></figure><h3 id="9-4-内置对象">9.4 内置对象</h3><p><font color=#00C957>内置对象指JavaScript内部提供的对象，包含各种属性和方法给开发者调用。</font></p><p>其实我们一直在用了，像document.write()，还有console.log()这种，都是内置对象。</p><p>这里就重点介绍一下Math这个内置对象。</p><h4 id="9-4-1-Math">9.4.1 Math</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">PI</span>) <span class="comment">// 圆周率</span></span><br><span class="line"><span class="comment">// 方法</span></span><br><span class="line"><span class="comment">// ceil 天花板  向上取整</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="number">1.1</span>)) <span class="comment">// 2 </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="number">1.5</span>)) <span class="comment">// 2 </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="number">1.9</span>)) <span class="comment">// 2 </span></span><br><span class="line"><span class="comment">// floor 地板  向下取整</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">1.1</span>))  <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">1.5</span>))  <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">1.9</span>))  <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="string">&#x27;12px&#x27;</span>))  <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;----------------&#x27;</span>)</span><br><span class="line"><span class="comment">// 四舍五入 round</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">1.1</span>))  <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">1.49</span>))  <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">1.5</span>))  <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">1.9</span>))  <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(-<span class="number">1.1</span>))  <span class="comment">// -1 </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(-<span class="number">1.5</span>))  <span class="comment">// -1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(-<span class="number">1.51</span>))  <span class="comment">// -2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 取整函数 parseInt(1.2)   // 1</span></span><br><span class="line"><span class="comment">// 取整函数 parseInt(&#x27;12px&#x27;)   // 12</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">min</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(-<span class="number">1</span>));</span><br></pre></td></tr></table></figure><p><font color=#DA70D6>后面重点介绍了random函数，多了解了解就好了。</font></p><h2 id="十、基础扩展">十、基础扩展</h2><p><em><font color=#DA70D6>这部分稍微重要点，重点看看。</font></em></p><h3 id="10-1-术语解释">10.1 术语解释</h3><p><font color=#87CEEB>用这些术语可以显得自己更专业些.jpg。</font></p><table><thead><tr><th>术语</th><th>解释</th><th>举例</th></tr></thead><tbody><tr><td>关键字</td><td>在JavaScript中有特殊意义的词汇</td><td>let、var、function、if、else、switch、case、break</td></tr><tr><td>保留字</td><td>在目前的JavaScript中没意义，但未来可能会具有特殊意义的词汇</td><td>int、short、long、char</td></tr><tr><td>标识（标识符）</td><td>变量名、函数名的另一种叫法</td><td>无</td></tr><tr><td>表达式</td><td>能产生值的代码，一般配合运算符出现</td><td>10+3、age &gt;= 18等</td></tr><tr><td>语句</td><td>一段可执行的代码</td><td>if() for()</td></tr></tbody></table><h3 id="10-2-基本数据类型和引用数据类型">10.2 基本数据类型和引用数据类型</h3><p>简单类型又叫做基本数据类型或者 <strong>值类型</strong> ，复杂类型又叫做 <strong>引用类型</strong> 。</p><ul><li><strong>值类型：</strong> 简单数据类型/基本数据类型，在存储时变量中存储的是值本身，因此叫做值类型</li></ul><p>string ，number，boolean，undefined，null</p><ul><li><strong>引用类型：</strong> 复杂数据类型，在存储时变量中存储的仅仅是地址（引用），因此叫做引用数据类型</li></ul><p>通过 new 关键字创建的对象（系统对象、自定义对象），如 Object、Array、Date等</p><p><strong>堆栈空间分配区别：</strong></p><p>1、栈（操作系统）：由操作系统自动分配释放存放函数的参数值、局部变量的值等。其操作方式类似于数据结构中的</p><p>栈；</p><p><strong>简单数据类型存放到栈里面</strong></p><p>2、堆（操作系统）：存储复杂类型(对象)，一般由程序员分配释放，若程序员不释放，由垃圾回收机制回收。</p><p><strong>引用数据类型存放到堆里面</strong></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023年7月番完结观后感整理</title>
      <link href="/2023/10/06/%E3%80%90%E5%AE%8C%E7%BB%93%E8%A7%82%E5%90%8E%E6%84%9F%E3%80%912023%E5%B9%B47%E6%9C%88%E7%95%AA%E5%AE%8C%E7%BB%93%E8%A7%82%E5%90%8E%E6%84%9F%E6%95%B4%E7%90%86/"/>
      <url>/2023/10/06/%E3%80%90%E5%AE%8C%E7%BB%93%E8%A7%82%E5%90%8E%E6%84%9F%E3%80%912023%E5%B9%B47%E6%9C%88%E7%95%AA%E5%AE%8C%E7%BB%93%E8%A7%82%E5%90%8E%E6%84%9F%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="《BanG-Dream-It’s-MyGO-》">《BanG Dream! It’s MyGO!!!》</h3><img src="https://s2.loli.net/2023/10/06/hTAWnKUkGw4gCJ1.jpg"><p><strong>评分：8.3/10</strong></p><p>完整的长评见此：</p><p><a href="https://www.bilibili.com/read/cv26625498/">迷路中相遇的我们，将在迷茫中前进 —— 《BanG Dream! It’s MyGO!!!》观后感 - 哔哩哔哩 (bilibili.com)</a></p><p>在这个季度追番下来的动画观众，一定不会对MyGO感到陌生。这部作品过于特殊，它的追番过程中由于包含了大量场外因素，带来的体验是独一无二的；对于想要补番的观众，实际上补番过程未必会有相同的体验，但即使只论作品本身，也已然足够优秀，足以让我推荐去观看了。</p><p>MyGO不同于传统的乐队番，其表达并非是在传统的“友情”“梦想”的命题下，将人物景观式地展开，而是真正聚焦于角色处境，深入挖掘其内心历程。在追番过程中，故事中迷路的孩子们相遇所产生的化学反应，复杂的人际关系下一次又一次分崩离析的压抑，以及这究极的压抑释放后的畅快，都给笔者带来了巨大的感动。无论是一波三折峰回路转的剧情，各个人物在激烈矛盾中的挣扎与弧光呈现，还是几度神级的演出与酣畅淋漓的情感爆发，都使得笔者久久难以忘怀。 MyGO 中的各个角色复杂而又立体，每一位都有着自己独特的人格魅力。美中不足的是作为商业企划，结尾商业性的分割使得观感上产生了些许的不连贯，这是个尚未结束的故事，笔者对于下一部已宣布制作的作品满怀期待，希望能为故事画上圆满的句号。</p><p>**推荐程度：**强烈推荐。</p><h3 id="《不死少女-杀人笑剧》">《不死少女 杀人笑剧》</h3><img src="https://s2.loli.net/2023/10/06/AFOwIyqBnPs5SZE.png"><p><strong>评分：7.5/10</strong></p><p>奇幻风格下的故事，在吸血鬼、人造人、狼人等怪异背景下上演的侦探闹剧。</p><p>于笔者而言，本作首先吸引我的便是整体的氛围。EP1以大量文戏交代奇幻的故事背景，其中文戏演出尤其精妙，通过巧妙构思的分镜与各色多彩的风格，使得大量高密度的信息台词并不显得乏味枯燥，相反十分有趣，这种演出也奠定了故事诡谲的基调与风格，这于笔者而言已具有足够的吸引力。</p><p>故事上整体分为了三个案件，第一个案件是较为传统的本格推理，整体讲了一个还算不粗哦对故事；第二个案件则极大弱化推理，一转fate式的乱斗风格，以18世纪的欧洲为背景，在维多利亚风情的建筑风格下展现性格各异的名人角色的乱斗，颇有圣杯战争欧洲分杯的味道，观感上还是看着挺过瘾的；第三个案件则似乎资源不足等原因，质量上有断崖式下滑的态势，推理与乱斗元素都存在但都未深入，导致最终两边都没做好，细节上许多地方也未经打磨经不起推敲，这是笔者感到较为遗憾的地方。</p><p>**推荐程度：**推荐观看，除去质量断崖下滑的第三篇，前两篇都算值得一看。</p><h3 id="《白圣女与黑牧师》">《白圣女与黑牧师》</h3><img src="https://s2.loli.net/2023/10/06/e5qzomHdbhKp4TR.png"><p><strong>评分：7.3/10</strong></p><p>可认为是萌系日常番，整体采用萌系画风，讲述的是迟钝男主黑牧师与可爱女主白圣女的日常故事。</p><p>观感极为舒适的作品，富有轻松惬意的氛围。虽然有着恋爱的标签，但实际上并未如恋爱作品一般进行细腻的情感描写；偶有相对沉重的议题，也暗含少量刀子，但都是点到为止，没进行任何深入，还是维持着日常的基调。整体来说还是比较清新放松，属于慢节奏治愈类型的萌系日常作品。值得一提的是，作为季度指定表情包供应商，漫画的表情包早已有名，出现动画后变成了彩色+动态，十分可爱。适合用于放松身心，笔者常在起床后与睡前观看一集，有着极佳的治愈效果。</p><p>**推荐程度：**对于萌系日常番受众，推荐。</p><h3 id="《LV1魔王与独居废勇者》">《LV1魔王与独居废勇者》</h3><img src="https://s2.loli.net/2023/10/06/6e1qxZ9zNbRd2lT.png"><p><strong>评分：7.1/10</strong></p><p>讲述勇者打败魔王十年后，变成萝莉复活的魔王与废柴勇者的搞笑故事。整体贯穿着搞笑的基调，前期以日常为主，后期也加入了主线。</p><p>日常部分搞笑元素不少，能够让笔者笑出声，整体质量也较为稳定，甚至部分画面制作上超出了笔者的预期，制作相对精良；后期一转正经主线，讲述打败魔王后走上不同道路的原勇者小队，因如今身份立场不同而产生的冲突故事，然而实际上整体较为浮于表面，对于勇者与魔王这一议题的解构也并未深入挖掘，整体故事还是较为普通的；但实际上总体的剧情逻辑性没有大问题，相反其实相当契合原勇者小队全新的身份与形象，时代变迁下原先亲密无间的勇者小队，如今各自的生活已全然不同，这种场景还是相当令人感慨的。整体来说，是看得比较开心的一部作品。</p><p>**推荐程度：**较为推荐。</p><h3 id="《间谍教室-第二季》">《间谍教室 第二季》</h3><img src="https://s2.loli.net/2023/10/06/MDrhdTKCFE4pNPv.jpg"><p><strong>评分：6.5/10</strong></p><p>同名的续作，声豚狂喜篇。总体仍是分为两部分，主线回是演间谍戏，正经讲故事，日常回则通过展现主角们的互动塑造人物，较为轻松。</p><p>看过第一季的观众，对于这部作品应当有了一定的认知：主线故事没有什么水平，间谍水平甚至不如间谍过家家，无法抱着希望看到精彩故事的期望；日常回则回归轻松的基调，展现少女们的日常，观感相比主线有所上升。第二季延续了这一基调，但值得一提的是，本季的两个篇章相比第一季有明显提升（注意，只是相对第一季）：忘我篇的主线剧情是目前动画化部分最为精彩的，最终的反转超出了笔者的预期，体现出了一定水平；梦语篇则是体现在制作方面，例如过去与现在时间线的交织，黑白与彩色分镜的渲染，音乐的适时插入调动气氛，真相揭露的情感爆发等，在制作方面已经算是比较优秀的了，唯一的缺点是剧本过于抽象，匹配不上这种制作。</p><p>**推荐程度：**第一季看得舒服的观众可以在第二季获得同样良好的观看体验，甚至有所提升；对声豚强烈推荐，其余观众可选择观看。</p><h3 id="《莱莎的炼金工房-～常暗女王与秘密藏身处～》">《莱莎的炼金工房 ～常暗女王与秘密藏身处～》</h3><img src="https://s2.loli.net/2023/10/06/VqisRhQaY2MfTrb.png"><p><strong>评分：6.4/10</strong></p><p>同名游戏改编作品，讲述普通的农家少女莱莎成为炼金术士的冒险故事。</p><p>作为纯动画党，原先期望的实际上是跟着莱莎满世界跑探索未知的样子，但实际上的内容与其说是充满奇幻色彩的冒险故事，更像是悠闲的农村氛围日常。整体剧情都较为日常平淡，算是比较轻松惬意的故事，莱莎是属于比较有男孩子气的元气类型，对于未知世界充满着好奇心和探索的热情，笔者十分喜欢这种性格；画面制作方面略有匮乏，但没有太大崩坏，观感整体还算是舒适。适合下饭使用。</p><p>**推荐程度：**粉丝向作品，粉丝可观看，其余观众可选择观看。</p><h3 id="《转生成自动贩卖机的我今天也在迷宫徘徊》">《转生成自动贩卖机的我今天也在迷宫徘徊》</h3><img src="https://s2.loli.net/2023/10/06/PgswVZhaEnkWX37.png"><p><strong>评分：6.1/10</strong></p><p>稍有特色的异世界厕纸。讲述的是穿越到异世界变为自动贩售机的故事，虽有许多战斗回但整体氛围还是富有日常感。</p><p>在期望管理为厕纸的基础上，本作的亮点源于其设定：男主可变为不同的贩售机，形态多样，但身为非人类无法正常进行交流。这使得一方面，男主异常多的贩售机形态可以带来不同脑洞的奇妙玩法，较为有趣，且经笔者查询这皆为世界上真实存在的贩售机，可以在某种意义上当成贩售机科普；另一方面男主身为异类，与其它人进行的互动的方式与传统龙傲天也并不相同，这种互动本身也存在看点。人物方面，女主的人设较为元气可爱，且CV为本渡枫，对于笔者而言是有吸引力的。</p><p>**推荐程度：**整体未脱离厕纸的水平，但在厕纸中属于比较有趣的作品，可选择观看。</p><h3 id="《其实，我乃最强？》">《其实，我乃最强？》</h3><img src="https://s2.loli.net/2023/10/06/6ijSEv3LGOneNgK.jpg"><p><strong>评分：5.2/10</strong></p><p>标准的异世界厕纸。讲述的是穿越+龙傲天的故事。</p><p>在期望管理为厕纸的基础上，本作的最大问题在于男主的人设：对家里蹲的异常执念导致其行为和思想都脱离常识，性格极度不讨喜。这样的避世主义导致原有爽文的特性也缺失，连最基本的装逼带来的爽快感都无法满足，对观感有着强烈的负面影响；除此之外本作画面制作上有些诡异，整体亮度太高有点过曝的感觉，视觉效果不佳。唯一的亮点在于妹妹的人设性格都较为可爱，相关的剧情明显比其它剧情更为有趣，且CV为种崎敦美，对于声豚来说会是不错的体验。</p><p>**推荐程度：**中等水准的厕纸，对妹妹角色感兴趣可尝试观看，对大部分观众不建议观看。</p><h3 id="《虽然1级但以固有技能却是最强的》">《虽然1级但以固有技能却是最强的》</h3><img src="https://s2.loli.net/2023/10/06/hFiEr7JxlTjqo15.png"><p><strong>评分：4.7/10</strong></p><p>很标准的异世界厕纸。讲述的是穿越+龙傲天的故事。</p><p>需要一提的是，笔者在期望管理为厕纸的基础上，对于厕纸的观感取决于两方面：一为剧情，厕纸的剧情可以无聊但绝不能难受；另一个为妹子，人物可以缺乏塑造但绝不能招致反感，起码也要在外表人设上有所亮点。本篇的世界观乍一看相比其它厕纸存在特色，但实际上根本经不起推敲；而扣分的主要点在于人物方面，剧中部分人物的性格并不讨喜，同时画面制作较为残念，起不到养眼作用的同时还会造成负面观看体验。</p><p>**推荐程度：**厕纸中的中下位，不建议观看。</p><p>PS：可以听一听本作OP，歌相当好听。</p>]]></content>
      
      
      <categories>
          
          <category> 番剧 </category>
          
          <category> 完结观后感 </category>
          
          <category> 2023年7月 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 番剧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迷路中相遇的我们，将在迷茫中前进 —— 《BanG Dream! It&#39;s MyGO!!!!!》观后感</title>
      <link href="/2023/09/20/%E3%80%90%E6%96%B0%E7%95%AA%E8%A7%82%E5%90%8E%E6%84%9F%E3%80%91%E8%BF%B7%E8%B7%AF%E4%B8%AD%E7%9B%B8%E9%81%87%E7%9A%84%E6%88%91%E4%BB%AC%EF%BC%8C%E5%B0%86%E5%9C%A8%E8%BF%B7%E8%8C%AB%E4%B8%AD%E5%89%8D%E8%BF%9B%20%E2%80%94%E2%80%94%20%E3%80%8ABanG%20Dream!%20It&#39;s%20MyGO!!!!!%E3%80%8B%E8%A7%82%E5%90%8E%E6%84%9F/"/>
      <url>/2023/09/20/%E3%80%90%E6%96%B0%E7%95%AA%E8%A7%82%E5%90%8E%E6%84%9F%E3%80%91%E8%BF%B7%E8%B7%AF%E4%B8%AD%E7%9B%B8%E9%81%87%E7%9A%84%E6%88%91%E4%BB%AC%EF%BC%8C%E5%B0%86%E5%9C%A8%E8%BF%B7%E8%8C%AB%E4%B8%AD%E5%89%8D%E8%BF%9B%20%E2%80%94%E2%80%94%20%E3%80%8ABanG%20Dream!%20It&#39;s%20MyGO!!!!!%E3%80%8B%E8%A7%82%E5%90%8E%E6%84%9F/</url>
      
        <content type="html"><![CDATA[<p>历经数月的追番历程，MyGO 动画于前几日迎来了完结。迷路的孩子们相遇所产生的化学反应，复杂的人际关系下一次又一次分崩离析的压抑，以及这究极的压抑释放后的畅快，都给笔者带来了巨大的感动。无论是一波三折峰回路转的剧情，各个人物在激烈矛盾中的挣扎与弧光呈现，还是几度神级的演出与酣畅淋漓的情感爆发，都使得笔者久久难以忘怀。 MyGO 中的各个角色复杂而又立体，每一位都有着自己独特的人格魅力。本文自角色出发，希望聚焦于角色的生活处境，探讨角色的内心历程，从而挖掘角色的魅力，以此抒发笔者心中的情感。</p><h3 id="1-千早爱音：乐队中的“大天使”">1. 千早爱音：乐队中的“大天使”</h3><img src="https://s2.loli.net/2023/09/17/DR5oQ4Aqkr7Txiu.png"><center style="color:#C0C0C0;font-size:14px">EP12，爱音比心心镇楼</center><p>在社群中，爱音一直被观众称为“圣爱音”，笔者也深受爱音近乎“大天使”般形象的吸引。</p><p>纵观全剧，千早爱音的定位其实相当有趣 —— 她并非是 旧CRYCHIC 矛盾的亲历者，而在这样一个以 旧CRYCHIC 成员为核心的故事中，爱音无异于一个外乡人般的存在。也因此和“各怀鬼胎”的其他 MyGO 成员不同，爱音卷入这场风波的契机实在再简单不过 —— 想要通过办乐队的方式，来获得注意。虽说在日后爱音以“虚荣”一词自称这一心理，但在笔者看来，爱音这种希望通过表现自我获得他人尊重的表现，就类似于幼儿园得到老师小红花很高兴的心理，与青春期孩子的形象十分契合，反倒显得更有“真实感”。爱音在后续与众人的相处过程中，实际上丝毫不掩饰这样的心理，即使在面对气氛极其“沉重”的场景下，爱音仍如同小孩子般在乐队名、站位等方面疯狂整活（这种整活甚至持续到了最后），而有趣的是，这样的行为在表现效果上不但不会招致人的反感，反而给作品增添了几分笑料。</p><img src="https://s2.loli.net/2023/09/16/5wfbAgYuDUMS7ce.png" style="zoom: 33%;" ><center style="color:#C0C0C0;font-size:14px">EP04中，灯久违露出了笑容，而这份笑容正是来源于爱音的活跃</center><p><font color=1E90FF>不过在此处，也不免会让人产生这样一种担忧：这样一个各方面表现都显得有“超凡入圣”之嫌，与沉重格局显得格格不入的人物，是否容易沦为背景板或是万能的破局工具人一般的存在？</font></p><p><font color=#FF9911>幸运的是，爱音的刻画在这一点上，在我看来做得还是可以的。</font>纵观全剧，爱音内在困惑的爆发总共出现了三次 —— 一次为 EP05 中被立希一针见血指出一直在逃避后的逃跑，一次为 EP09 中得知自己是不被需要存在后的打击。而剩下的一次，则需要我们再往前看，便可以发现故事的开端某种意义上甚至是源于爱音内在困惑的第一次爆发 —— 英国留学经历的失败促使爱音回国转校，也成为了 MyGO 这一乐队组建的起源。</p><p><font color=#DB7093>仔细分析，我们不难发现，三次爆发的幕后都源于爱音的自尊心，而三次困惑的消解也折射出了爱音内心历程的转变，这一点也反映在了爱音的现实行动上：</font></p><ul><li><p><font color=1E90FF>第一次困惑是源于英国留学的失败经历。</font>留学失败的经历也许是爱音人生路上的第一次巨大挫折 —— 在初中作为学生会长闪耀的自己，到了英国却是同学和老师连名字都无法记住的存在。这次爆发以爱音的回国结束，爱音第一次认识到了自己的软弱和有限的能力，但选择了逃避；</p></li><li><p><font color=1E90FF>第二次困惑是源于第一次困惑下的逃避，爱音回国后致力于组建乐团，但始终没有认真对待。</font>与第一次的性质不同，第一次的逃避源于爱音对于自己能力的错误预估，第二次则是源于经历第一次失败后的缺乏自信。此次爆发以灯向爱音传递心声，让爱音面对缺乏自信的自我为结束，推动爱音迈出了敢于尝试的一步。<br>也许有人会指责爱音的矛盾就这样简单结束，颇有“重重拿起轻轻放下”之嫌。实际上笔者看来，此次困惑的解决只是让爱音敢于面对自己的迷茫 —— 这种迷茫自英国留学失败起始，并非完全消解爱音的缺陷。实际上，爱音的其余可能被认为是负面的特质，例如过度的表现欲等，并未经过这一次便消除，而是从始至终一直存在的。也许有过度解读之嫌，但笔者认为爱音并未在失败后便陷入一蹶不振（<em>笔者在现实中见过一些因一次失败而彻底放弃之人，因此认为爱音平日的行动就是一种积极的象征</em>），在转学过后积极寻找自己的社交圈，即使态度显得轻浮也在尝试创办乐队。爱音其实一直知道问题的答案，在 EP01 中她在得知灯曾经组建乐队失败后就说过，“就算失败一次也要有重新再来的勇气，不然人生那么长怎么过得下去”。她内心深处也许是想在新的尝试中认清自我，只是暂时缺少一个契机。灯并非说教类的人物，传递的只是同样的“迷茫”，但这份传递对爱音来说已经足够了。</p><p>最为精妙的是，作者并未使爱音在困惑解除后，便成为“超凡入圣”的解脱者，这也使得第三次困惑诞生；</p></li><li><p><font color=1E90FF>第三次困惑是源于素世未将自己视为乐队一员的现实。</font>感受到被排除在外的爱音，在错愕之余给灯抛出了难题 —— 是选择素世，还是选择爱音？这种近乎电车难题的提问，灯自然无法作出回答。此次爆发以天台上爱音承认了内心的虚荣为结束。<br>在笔者看来，这一次困惑与第二次极其相似 —— 第二次爱音直面的是自身能力的缺失，而这一次爱音直面的是自己并非世界中心的事实。<font color=#FF9911>也因此，这一次困惑其实早在第二次便已经解决，第二次中爱音已经有了面对迷茫的勇气，这一次只是迷茫对象的不同。</font><font color=#DB7093>正是因为早以认清这样的事实，爱音后续也并未对灯，甚至并未对在这次事件中最过分的素世进行苛责，而是在天台上再一次承认自己的迷茫。回避灯的行为在我看来只是一种赌气 —— 当自己不被需要的事实赤裸裸地被揭露时，若是内心没有情绪的爆发，反倒显得太“超凡入圣了”。</font>这并非完全是笔者的臆想，而是体现在爱音的行为上的 —— 即使在回避后，爱音仍每日坚持练习吉他，这一方面是第二次困惑解决的体现（面对自己能力不足的现实），另一方面也是爱音仍有继续乐队的想法，才会如此。否则若是彻底切割，为何还需要练习本就没接触多久，连兴趣爱好都谈不上的吉他呢？这样的赌气符合青春期女生的心理，也正是因为仅仅是赌气，爱音后续才会如此快的就重新和解。<br>实际上这里，真正对不起爱音的就只有素世，爱音也知道这一点，所以她仍是把灯视为朋友的，因此对于灯这边，她的行为只能用“赌气”来解释。后续爱音回归后，她直面了乐队的现状和问题后，清楚乐队此时最大的问题是素世，便以极高的行动力去解决这一问题。<font color=#DA70D6>这一点正反应了爱音内心历程的转变，从轻浮的态度变为认真，爱音认真状态下极高的行动力也是吸引笔者的一大特性。</font><br>（这里写一点真正的臆想。爱音视角显然是不可能知道素世对祥子的惊鸿一跪，以及 CRYCHIC 彻底结束的事实的，她能知道的就只有素世在尝试重组 CRYCHIC。也因此爱音视角里，CRYCHIC 是有重组成功的可能性的。所以若是素世真的重组 CRYCHIC 成功了，爱音的性格可能是会真正献上祝福，然后重新寻找属于自己的乐队吧。圣爱音qwq）</p></li></ul><p>在三次困惑结束后，爱音彻底将乐队成员视为真心的朋友看待，无论是外号还是提议共同拍摄合照等行为，无不显示爱音已经将乐队视为了一个真的“命运共同体”。后续的整活行为（如乐队名为“ANON TOKYO”，以及脑补中自己永远站在C位的想法）已经完全变为了朋友之间调侃的玩笑话，爱音以自己的方式将乐队成员的关系变得紧密。<font color=#DA70D6>这样一个在关键时刻总能为团队付出，平日表现又如此活力可爱，近似“大天使”般的存在的少女，又怎能不让人喜爱呢？</font></p><img src="https://s2.loli.net/2023/09/17/DbQJtMXGaKfRjZv.png"><center style="color:#C0C0C0;font-size:14px">EP11，“ANON TOKYO”被拒绝后爱音的表情包，笔者看到这时真的被可爱到了</center><h3 id="2-高松灯：破茧成蝶，终于阳光下起舞">2. 高松灯：破茧成蝶，终于阳光下起舞</h3><img src="https://s2.loli.net/2023/09/18/jRobdamcgQ761Dh.png"><center style="color:#C0C0C0;font-size:14px">EP01，腼腆的高松灯镇楼</center><blockquote><p>“只有自己哭不出来，是为什么呢？是我太冷酷，还是作为人，缺少了什么呢？我没有像大家那样重要的事物。我想拥有重要的事物，让我像大家那样流泪。如果说有的话……那曾是CRYCHIC。”</p><p>—— EP03 高松灯的内心独白</p></blockquote><p><font color=1E90FF>高松灯的内在困惑是贯穿始终的：先天的共情障碍让她无法理解他人，在此基础上的不善言辞使得灯根本无法与他人进行交流，从而产生了强烈的自卑感，视自己为“怪物”般的存在。</font>长期如此的高松灯对着“归宿”有着极度强烈的渴求，她认为自己的异类是不合群的根源，因而不断发出“想成为人类”的呐喊。</p><p><font color=#FF9911>有趣的是，灯虽然以这样一种“弱者”的姿态存在，但她的内在困惑几乎全是源于内心自发的痛苦，并未受到过外在的恶意。</font>通过上帝视角我们不难发现，外界给予长期处于黑暗中的灯的，一直是关爱与保护 ——  年幼时即使送了虫子给朋友，朋友也愿意继续和灯玩，母亲给灯的也并非指责而是温暖的安慰；初中时期灯的同学会主动与灯打招呼，交流电视剧的话题，毕业典礼时也拉着灯一起哭泣、一起合照；高中时期灯更是被视为班上吉祥物般的存在（爱音最初也是因为这一点邀请的灯），只是认为灯更喜欢一个人独处而给予了她空间；CRYCHIC 时期有祥子和素世这样始终照顾着灯的存在，就更不必说了。</p><p>MyGO 的世界正是这样一个温柔的世界，只是可惜灯的共情障碍使她无法理解这样的温暖。<font color=#DB7093>相反的是，这样的温暖一度成为了缠绕于灯的隐形束缚。</font>长期被保护的现状使得灯虽倍感痛苦，但潜意识中她已经把这一处境视为了某种“理所当然”的存在 —— 因为我是“怪物”，我的不合群是注定的。CRYCHIC 的解散更是加固了灯的这一意识，她将所有的过错归咎于自己，认为正是因为她这种“怪物”的存在，才导致团队的离去。她认为身为异类的自己，无论做什么都只会失败，<font color=#DB7093>也因此主观上灯虽然有改变现状的想法，却始终缺乏突破这一道墙壁的勇气。</font></p><img src="https://s2.loli.net/2023/09/18/ktRMhOa7vPVlTHc.png"><img src="https://s2.loli.net/2023/09/18/NQkPwJKXBRIgYjy.png"><center style="color:#C0C0C0;font-size:14px">EP04，将解散的原因归咎于自己的灯</center><blockquote><p>拥抱过温暖阳光的春天 也将被盛夏的烈日燃尽</p><p>若终要枯于沥青路上 我宁愿永远躲在石头阴影下</p><p>—— EP10 高松灯在歌曲《诗超绊》中的朗诵部分</p></blockquote><p>而灯改变的契机来源于 EP01 中爱音的两句话 —— “就算失败一次也要有重新再来的勇气，不然人生那么长怎么过得下去”。其实放眼整个场景，这不过是再平常不过的两句话 —— 这并非说教式的场景，也没有使用特写等手法，只是爱音和灯聊天中偶然的两句话，以致于我猜测有些观众都忘却了这一细节。但就是这样两句话，给封闭灯内心的牢笼撕开了一道口子，让光线照了进来。<font color=#FF9911>这恰恰是笔者认为最有趣的地方 —— 人的改变有时候未必需要强烈的外力冲击，有时候那一点看似微不足道的小事就足以成为契机。</font>灯一直以来都是被他人保护的存在，他人对灯的安慰都是“这样的灯已经很棒了”之类的温柔语句，使灯封闭在了自己的圈内，她痛苦于现状，但却又担心自己尝试后会经历失败。<font color=#DA70D6>爱音给了灯这样一个方向，告诉了灯失败了也无所谓，这实际上是再简单不过的道理，但这就足以使灯迈出那一步了。</font></p><p>于是我们看到，当被立希指责的爱音跑走时，灯主动冲了上去，以复述爱音的话语将爱音拉回；当爱音因自己不被需要落寞离队后，灯站上了舞台念出自己的心声，在教室中对着爱音大声说出“我需要你”的重力语句；当素世想要结束乐队之际，灯主动站了出来，在观众的诧异中强硬地将素世拉上了舞台。灯的行动都显得笨拙，笨拙得可爱。没有长篇大论的说教，没有惊天动地的爆发，有的只是将自己的心声以最直白的方式表露，这也是灯独有的方式。<font color=#DA70D6>至此灯已经彻底作出了改变，突破束缚的她在追寻自己归宿的过程中，真正产生了要依靠自己守护这一归宿的信念 —— 谢谢大家在过去一直守护着我，这一次，就由我来反过来守护大家。</font></p><p>灯一直以来“想要成为人类”的呐喊，源于不合群带来的强烈孤独感，因而她将“成为人类”视为摆脱自己处境的方法论。但在她以自己的方式守护乐队的过程中，灯找寻到了自我存在的意义，强烈的孤独感也随之逐渐消散。因此我们看到在后期，灯不再执着于“变成人类”之类的目标，而是一遍又一遍呐喊着“自己不会再放手”的心声 —— 她不仅找到了自己物理上的归宿，更是在精神上找寻到了自己的存在价值。在这个过程中，灯逐渐承认了自己“迷路的孩子”的身份，她不再视自己为只能躲在黑暗角落，看着人类社会光芒的西瓜虫。灯与自己“怪物”的身份进行了和解，此时的她已然破茧成蝶，以在阳光下翩翩起舞的蝴蝶的全新姿态，以自己的方式与人类共处。<strong>一路下来，我们看到了灯在黑暗中的挣扎，破茧时的痛苦，也正是因为如此，化蝶的那一刻才会显得如此闪耀，如此令人感动。</strong></p><img src="https://s2.loli.net/2023/09/18/Pu6KeXvLEDkq7Yp.png"><center style="color:#C0C0C0;font-size:14px">OP《壱雫空》中，在雨后阳光下闪耀的灯</center><h3 id="3-长崎素世：追求名为“普通”的幸福">3. 长崎素世：追求名为“普通”的幸福</h3><p>长崎素世在很长一段时间，以如“妈妈”般照顾他人的温柔形象出现，对他人展现出无限的包容与善良，无论是在 CRYCHIC 还是 MyGO 乐队中都以团队关系维护者的身份存在。然而在“妈妈”形象的背后，我们也能窥见素世日常生活中工于心计的体现 —— 素世表面的和善似乎是另有所图。<font color=#FF9911>随着故事的推进，隐藏在素世背后的核心矛盾终于向我们揭开 —— 素世对于 CRYCHIC 有着极为强烈的执着，所做的一切都重组乐队为最终目的</font>。而当这样的愿望一次又一次受挫，并最终破灭之时，素世失去了长期行动下的内在动力，因而在万念俱灰之下不再掩饰自我。</p><img src="https://s2.loli.net/2023/09/18/bVQnqJSlHeCku4K.png"><center style="color:#C0C0C0;font-size:14px">EP08，发现自己被祥子拉黑后黑化的素世</center><p><font color=1E90FF>在这里，笔者曾一度陷入过惊讶：笔者原以为对 CRYCHIC 最为执着的，理应是灯；毕竟素世在 CRYCHIC 之外尚有自己的社交圈，而 CRYCHIC 却是灯唯一的归宿。</font>不过很快，EP09 便展示了素世如此行动的外在成因 —— 长期缺乏家人陪伴的现实造成了素世内心的孤独感，父母离异的家庭因素也使得她对于不安定的环境产生了恐惧。在此背景下，素世对于情感的渴求转化为了被依赖的欲望，向外则表现为向他人展示温柔以寻求接纳。素世在人际来往中长期以“被他人接纳”为最终目的，以此指导自己的行为，因而在不同场合下进行着不同的扮演。母亲工作如此辛苦，那么我理应作为“好女儿”给予母亲慰藉；同学有困难向我寻求，那么我理应作为“好同学”陪她一起；部员希望共同演奏，那么我理应作为“好部员”满足他们的要求。<font color=#FF9911>从这个角度说， CRYCHIC 可以说是素世在长期付出后的第一个回报，此前的扮演实际上带给素世的仍是空虚，而 CRYCHIC 是第一个真正给予素世“归宿感”的地方；CRYCHIC 对素世的意义并不亚于灯，也难怪素世在此后会拼尽一切，只为寻回 CRYCHIC 了。</font></p><p><font color=1E90FF>EP13中，素世对于灯的倾诉，也正表明了素世一路以来的生存方式，以及这样的生存方式下她暗藏的痛苦：</font></p><blockquote><p>我总是拼命想让周围的人接纳我，但是刻意去表现温柔，是不是一种伪善呢？<br>一开始想这些，我就难受得要死，我就故意不去想了。</p><p>—— EP13 长崎素世的倾诉</p></blockquote><img src="https://s2.loli.net/2023/09/18/4GNSCtoikcWIbhn.png"><center style="color:#C0C0C0;font-size:14px">EP09，寂寥的舞台衬托着素世孤独的身影</center><p>注意到此处，素世使用了“伪善”这个词。这让笔者感到十分有趣：在 EP09 播出之时，素世对祥子的惊鸿一跪以及面具的摘露曾一度引发部分观众对其指责，而其中较为极端的观点基于素世暗藏心机等负面特性存在的事实，指责素世的温柔善良等正面行为皆为虚假的产物，即一种“伪善”。而 EP13 中素世的倾诉，正是表明了她对这一现象的思考与迷茫：<font color=#DB7093>她选择了温柔待人的生存方式，这种方式为其带来了被依赖欲的满足，而同时由于自身也存在着工于心计的一面，对他人有时会从“如何利用”的角度看待，这一矛盾的心理使素世痛苦 —— 我对他人的温柔，到底是基于内心的真实想法，真正想要他人幸福，还是基于自己贪婪的欲望，只是为了自我满足呢？</font></p><p><font color=1E90FF>事实上笔者认为，这一想法实在是再正常不过的心理</font>，相信读者在生活中也会有下述的体会：我给予他人帮助，可以是受帮助他人的情感所驱使，这是一种无私，但我内心也可能暗暗期待着能够有所回报，这算是一种自私；自私和无私这两种看似矛盾的心理，是可以并存在一个人身上的 —— <font color=1E90FF>人就是这样一种复杂而又矛盾的存在</font>。素世并未认清这一点，因而陷入痛苦：她担心自己温柔的表现实质是丑恶的欲望化身，这种丑恶让她感到厌恶与恐惧。</p><p>在基于上述的认知后，我们再来重新审视素世的行为，<font color=#FF9911>不难发现素世即使后期摘下面具，嘴上说着“利用”等话语，内心却始终没有抛弃温柔。</font>当因演奏春日影一事与 MyGO 乐队成员彻底翻脸后，她对于随之找来的爱音并未拒绝沟通；惊鸿一跪换来的是祥子冰冷的言语，直到最后素世也不清楚祥子退团之谜，但后续的她仍然在尝试着理解祥子。而更进一步来说，素世痛苦于自己是否为“伪善”，这一想法本身就反应了她对于真善美的强烈追求。EP11 中，素世在与他人的相处中显得畏手畏脚，而立希敏锐注意到了这一点，点出了素世内心的阴影所在 —— 她愧疚于自己对他人的利用（尤其是爱音和乐奈），对于前面工于心计的行为，她终究也承载着负担。<font color=#DA70D6>这根本就不是什么伪善，种种表现都反应了素世的真实内心，即使她本人并无意识，但人内心深处的善良是藏不住的。</font></p><blockquote><p>PS：此处可以用《欢迎来到实力至上主义教室》中的角色栉田桔梗来进行对比（没看过的读者可略过此段）。栉田桔梗在表面上同样是温柔与善良的存在，但她的内心对这一行为认知是十分清晰的 —— 她的行为完全是基于自我满足，没有任何想要帮助他人的情感驱使，她真实的情感甚至截然相反，是强烈厌恶和反感帮助他人的。正是因为有着清晰的认知，她才能毫不犹豫地在面具被摘下后通过对于他人的无节制攻击，企图打击他人的社会存在价值和精神，以此满足自己真实情感的宣泄。这样的角色较为极端，属于真正的“伪善”类角色。</p><p>长崎素世实质上与此类角色相差甚远。</p></blockquote><img src="https://s2.loli.net/2023/09/18/xCD6aiTjQJzIWbF.png"><center style="color:#C0C0C0;font-size:14px">EP11，看着灯、爱音与乐奈的身影，素世的神情更多的是一种愧疚</center><p>“我想，我一辈子也忘不掉 CRYCHIC”，这是素世在番剧中留下的最后一句话。回顾一路的历程，看着素世作为对 CRYCHIC 最后一名有所留恋的成员，几乎是在不可能的情况下以孤独的姿态做着挣扎，在其中对于自己种种可能伤害他人的行为感到迷茫与痛苦，但为了守护自己重要的事物而不得不顶着痛苦前进的身姿时，我们自然也将深刻理解这句话背后的分量。这份愿望的沉重，也意味着愿望破灭后的素世痛苦之深。也正是因为这样的痛苦，当最后素世摘下面具，以真实的自我坦然面对 MyGO 的伙伴们，尝试以普通人的身份与他人共处之时，这份美好才显得如此珍贵，如此令人触动。素世深知自己内心的缺陷，但不再选择逃避，而是如灯所说的，要“在迷茫中前进”。<strong>此时的素世不再是基于“被依赖欲”带来的满足，而是尝试探索真实的自我与他人的相处之道，从中追寻自我存在的价值 —— 我想，素世追寻的事物，也许就是那名为“普通”的幸福。</strong></p><img src="https://s2.loli.net/2023/09/19/VeIvuw9Jd1RXsA7.png"><center style="color:#C0C0C0;font-size:14px">EP11，看着熟睡的MyGO成员露出微笑的素世。</center><center style="color:#C0C0C0;font-size:14px">素世可以以真实的自我与成员共处，这让她感到轻松，也许，这就是名为“普通”的幸福</center><img src="https://s2.loli.net/2023/09/18/dVOSgQ8uqaiLRvY.png"><center style="color:#C0C0C0;font-size:14px">EP13，素世表明将直面自己的迷茫</center><h3 id="4-椎名立希：“劣等生”与自我接纳">4. 椎名立希：“劣等生”与自我接纳</h3><p>笔者对于椎名立希的定位一度感到疑惑。从表面上看，立希这一角色似乎过于安定了：她不像爱音有着独特的“天使”性格，也不是乐奈那样吉祥物般的特殊存在，更不像灯和素世动不动就整点大活。<font color=1E90FF>全剧似乎没有花费多少笔墨对其进行描写，让人不禁疑问：这样的角色是否太过于“路人”了？</font></p><p><font color=#FF9911>当然，立希也绝非如路人般毫无存在感，她也同样存在着明确的内在困惑：源于姐姐阴影之下的自卑感。</font>不难猜测，作为“被比较的孩子”，这种劣等感几乎伴随了立希全部的成长生涯。虽说“普通”实际上是大多数人的真实写照，然而立希要强的性格令其不甘于平庸，这一点体现在了她的行动上 —— 无论是在课业外积极打工赚钱，还是在新乐队组建之际主动承担乐队负责人的任务，亦或是挑战自己此前未接触过的编曲领域，无比显示立希不甘于现状，渴望提升自己的积极心理。然而在这个过程中，立希的“劣等感”始终贯穿全程， 强烈的自卑感使之常常对自己的行动产生质疑；于是在 EP06 中，这一困惑产生了强烈的爆发，对于自己严苛要求带来的内在压力与乐队混乱的外在环境，令其发出了“自己没法做到像祥子那样啊”那样的宣泄，一度陷入崩溃的境地。</p><img src="https://s2.loli.net/2023/09/19/43vmbjlwJ5dDCVx.png"><center style="color:#C0C0C0;font-size:14px">EP06，立希对自己能力不足的悲伤</center><p>这次爆发的结束以爱音与灯追到立希的学校，在近乎玩闹的追逐中使得立希心情好转结束。<font color=#DB7093>然笔者认为，这不过是在爱音和灯的好意下，一次短暂的缓解；立希埋藏于内心深处的”劣等感“是始终存在的。</font>只是随着乐队后续不断发展，主要矛盾逐渐转移到了他人身上，使得立希的存在感逐渐淡化；而随着其他矛盾的不断解决，乐队逐渐步入了正轨，这份”劣等感“也随之被隐藏了。</p><blockquote><p>我当初听到灯的歌声时，觉得那唱的就是我。无法用言语描述的心情，都被灯转化为了歌声，让我知道了，这样的自己也有资格活着。</p><p>—— EP05 椎名立希的倾诉</p></blockquote><p>让我们回过头去进一步审视立希的行为。立希在全剧中多次表达了对灯的温柔与保护，且不同于灯或是素世对于“归宿”这一共同体的追求，立希从始至终执着的只有灯，而这一点也在 EP10 中被素世一针见血地指出。从立希的倾诉中，我们似乎可以探见这份关注的成因：立希从灯的歌声中产生了强烈共鸣，认定自己与灯处于相似处境，从而将自己的影子投射在了灯的身上，而灯闪耀的身影令她看到了实现自我价值的可能性。立希的内心有着与灯同样的“孤独感”，即使身处人群之中也觉得自己不属于其中。<font color=#DA70D6>如果说灯是由于先天的共情障碍造就的不合群，那么立希就是来源于长期在姐姐阴影下劣等感造就的“自卑”；她将自己认定为是“失败作”的存在。这样的强烈自卑让她对自己的存在意义产生了质疑，也因此当她看到了灯的闪耀后，追寻到了某种人生价值，从而说出“这样的自己也有资格活着”的语句。</font></p><img src="https://s2.loli.net/2023/09/19/WpCZPRiNogaSvdj.png"><center style="color:#C0C0C0;font-size:14px">EP03，live成功后的立希直接抱住了灯，内心十分感动</center><p>到这里，立希迷茫状态的成因便呼之而出了 —— 这实质是难以接纳作为“普通人”的自己。<font color=1E90FF>在笔者看来，这实际上是一种具有普遍现象的心理，在日常生活中并不罕见。相信一些读者的人生经历中也会有像“别人家的孩子”之类的存在，而在竞争这一要素普遍存在的当下社会，与他人产生差距的现象也会频频发生；毕竟，大部分人都只是所谓的“普通人”。</font>立希也不过是万千大众中“普通”的一员，只是他人的闪耀让其难以忍受作为“普通人”的自己。这是普通人常见的心理，而动画到最后也并未对这一命题进行进一步阐释，她没有如同其他人有着“痛骨铭心”般的强烈冲击，因而使得立希显得有一丝“路人”感。</p><p>不过，像这样的议题本身就不存在所谓的最优解，也许一辈子都找不到所谓的“答案”，在漫长的人生历程中逐步与自己达成和解不失为一份美丽的答卷。<font color=#DB7093>到故事的结尾，MyGO 乐队已然步上了正轨，被立希所关注的灯已然接纳了不完全的自己，而立希也作为乐队的主导者带领着乐队在迷茫中前行；希望在这个过程中，立希能够逐渐与自己的“普通”达成和解，意识到这份普通也有闪耀的地方，找到自我存在的价值吧。</font></p><img src="https://s2.loli.net/2023/09/19/iVsun3l9F2TtwmX.png"><center style="color:#C0C0C0;font-size:14px">EP07，看到灯唱出声后欣喜的立希</center><h3 id="5-要乐奈：游离常识之外的“猫系”少女">5. 要乐奈：游离常识之外的“猫系”少女</h3><img src="https://s2.loli.net/2023/09/18/hzXbYtK15UReNVu.png"><center style="color:#C0C0C0;font-size:14px">EP04，微笑猫猫，"有趣的女人"</center><p>乐奈是笔者在剧中十分感兴趣的角色。无论是灯“想变成人类”的呐喊，立希对于“活着”意义的追寻，还是祥子与睦那边“人偶”意象的反复出现，众多角色内心的空洞似乎都共同指向对“成为人类”的追求。而乐奈在某种意义上与这一追求背道而驰。<font color=1E90FF>作为被众人称为“流浪猫”的存在，乐奈似乎始终游离于众人之外；她身上不具备人世中的常识，展现出的始终是一种“猫性”。</font></p><p><font color=#FF9911>与传统上通过外表上的猫耳等特征的标识，以及行为上通过卖萌等方式展现猫“可爱”等特性的角色不同，乐奈的“猫性”并非浮于表面，而是完全融于角色的特质之中。</font>一方面，猫是不具备人类的常识的，我们可以看到乐奈对于电子产品使用的无知，在舞台试音时的疑惑。猫猫的行为天然超脱于人类的常识，也因此队友试图以人类的思维去接触和理解乐奈的行为常常无功而返。另一方面，与会以直率热情的方式表达对人类喜爱的狗不同，猫天然便有着“不可捉摸”的特性，这一特性也决定了猫与人类独有的相处方式；也因此，我们会看到乐奈平日的行动往往神出鬼没，会在众人惊异眼神中混入并直接演奏音乐，感到无聊后便又自发离开。“猫性”的举动往往会打乱队友的节奏，使队友陷入困惑，但这并非意味着乐奈只顺从于内心不顾他人感受，缺少对他人的关爱；相反，乐奈实则重视着队友，在乐队一度分崩离析之时会主动前去帮助行动的灯，直率地将立希拉上舞台，在正式 live 之类的关键场合也从未掉过链子。毕竟猫猫与人的相处方式与人之间的相处方式并不相同，如此的行为正是“猫系”的乐奈情感表达的独有体现。</p><img src="https://s2.loli.net/2023/09/19/oz5FbDvltWxrpMf.png"><center style="color:#C0C0C0;font-size:14px">EP11，睡眼朦胧的猫猫</center><p>在 EP12 乐队正式成型后的第一个日常回中，向来话语甚少词不成句的乐奈极为少见的吐露了自己的背景：</p><blockquote><p>她以前经营的Live House，SPACE<br>我以为那里会一辈子都在<br>虽然现在没有了<br>不过 她说过总会有人再创造新的栖身之处的</p><p>—— EP12 要乐奈</p></blockquote><p>乐奈也曾有过作为家猫生活的时光，而 SPACE 的关闭令其成为了“流浪猫”。<font color=#DB7093>虽说在流浪生涯中乐奈并未展现出形单影只的空虚，但想必内心深处还是想要一个类似于“家”的归宿吧。也因此灯的“一生宣言”会触动乐奈，使之不由笑出声，认为乐奈是“有趣的女人”；“流浪猫”的本质也是“迷路的孩子”，对于安定的栖身之处同样有着渴求。幸运的是，MyGO 给了猫猫一个新的“家”。</font></p><img src="https://s2.loli.net/2023/09/19/6VF1mMUsrgpxwc8.png"><center style="color:#C0C0C0;font-size:14px">EP12，乐奈的奶奶来看乐奈的live</center><p>回顾前文，无论是自认“作为人类有所缺失”的灯，因劣等感而陷入自我质疑的立希，还是戴上面具寻求接纳的素世，他们都有着共同的特点：追寻“身为人类”的生存之道，寻求融入于人群的方式。而乐奈与上述角色，甚至于与整个动画的出场角色都不相同，<font color=#DA70D6>“猫系”的乐奈并不寻求“成为人类”而融入人群，更是真正作为某种“异质”的存在与人类共处。也因此，乐奈与他人的相处往往会展现出出人意料的效果。</font>这种效果使得笔者感到十分有趣，也正是这种独特的塑造所产生的魅力深深吸引了笔者。</p><h3 id="6-MyGO：在迷茫中前进">6. MyGO：在迷茫中前进</h3><p>与传统的音乐或偶像番不同， MyGO 的故事显得更为现实。MyGO 乐队并非如传统的乐队，至少对于笔者而言，并未感受到队员之间有着“永不分离”般的强烈羁绊，也没有“非这几个人不可”的执念，队员之间更没有所谓“共同的梦想”之类的目标来指导前行；甚至于在某种程度上，“组建乐队”这件事本身便已是一大终极目标。<font color=1E90FF>在故事的最后，曾发表“一生宣言”的灯也意识到，所谓的“一辈子组乐队”实在是过于理想主义，近似于一种妄想；即使不愿面对，也必须承认，现实并非是喊着“爱与梦想”一类的口号便可冲破一切的理想世界。</font></p><img src="https://s2.loli.net/2023/09/19/kWfXt1VMiyA9FuO.png"><center style="color:#C0C0C0;font-size:14px">EP11，灯的话语和歌词体现了她对“一生宣言”的重新思考</center><p>是的，MyGO 绝非一个理想化的世界，在经历了如此多的坎坷后，它仍要求我们面对现实；<font color=#FF9911>但，MyGO 的故事一定是一个浪漫的故事。</font>在故事的末尾，灯重新对自己的“一生宣言”进行了思考，并给出了自己的答案：</p><blockquote><p>Live仿佛只有短暂的一瞬间<br>但是当时的情感和光芒，是确实存在的<br>只要将无数个瞬间积攒起来<br>我想就能成为一辈子</p><p>—— EP13 高松灯在Live成功后的感悟</p></blockquote><p><font color=#DB7093><strong>是啊，也许所追求的事物是虚无缥缈的，但是这种信念是真实的；live 转瞬即逝，但是那个瞬间的光芒是将一直存在的，而所谓的一生，就是将这样一个个闪耀的瞬间积攒而成。没有什么过去的命中注定，也没有什么将来的永不分离，有的只是当下存在的瞬间、当下正在享受这个瞬间的我们，以及这个瞬间里的情感与闪耀的光芒。所以，即使那份理想只是美好的愿景，即使前路处于一片迷雾之中，我也要坚持自己的信念，积攒每一个瞬间；即使迷茫，也要前进。</strong></font>这是一个如此浪漫的答案，浪漫到让笔者难以用言语形容自己的感受 —— 我想，这也正是 MyGO 动画的魅力所在。</p><h3 id="后记">后记</h3><p>笔者自八月份开始加入 MyGO 这一作品的追番队伍中，期间也历经动画社群的讨论。在追番过程中，MyGO 给我带来了太多惊喜，社群的各种讨论也是令笔者乐趣无穷。MyGO 动画给我带来的追番体验是难忘的，相信即使是十年二十年过后回忆，这部动画也仍会在我心中留有极大分量。</p><p>正是这种难忘的体验，驱使着笔者写下这篇文章。实际上，笔者的文字功底等较为薄弱，各方面的综合能力与素养也存在不足，这是笔者第一次写下万字以上的长评。笔者向来是对动画极度宽容的人，对于 MyGO 动画又是抱着强烈的喜爱观看，因此这篇文章不免会带有许多主观滤镜与色彩，可能会融入一些被他人认为是过度解读甚至于臆想的内容，同时文章的内容可能也比较发散，还请各位读者以批判的眼光看待，不足之处请多多指点。</p>]]></content>
      
      
      <categories>
          
          <category> 番剧 </category>
          
          <category> 长篇观后感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 番剧 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
